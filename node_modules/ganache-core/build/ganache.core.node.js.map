{"version":3,"sources":["webpack://Ganache/webpack/universalModuleDefinition","webpack://Ganache/webpack/bootstrap","webpack://Ganache/./lib/utils/to.js","webpack://Ganache/external \"ethereumjs-util\"","webpack://Ganache/external \"util\"","webpack://Ganache/external \"async\"","webpack://Ganache/external \"ethereumjs-common\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subprovider.js\"","webpack://Ganache/./lib/utils/runtimeerror.js","webpack://Ganache/external \"lodash\"","webpack://Ganache/external \"source-map-support/register\"","webpack://Ganache/external \"ethereumjs-account\"","webpack://Ganache/./lib/utils/transaction.js","webpack://Ganache/external \"ethereumjs-tx\"","webpack://Ganache/external \"ethereumjs-block\"","webpack://Ganache/./lib/utils/log.js","webpack://Ganache/./lib/utils/receipt.js","webpack://Ganache/external \"level-sublevel\"","webpack://Ganache/./lib/utils/errorhelper.js","webpack://Ganache/external \"events\"","webpack://Ganache/./node_modules/web3/src/index.js","webpack://Ganache/external \"web3-core\"","webpack://Ganache/external \"underscore\"","webpack://Ganache/external \"web3-utils\"","webpack://Ganache/./lib/provider.js","webpack://Ganache/./node_modules/ethereumjs-wallet/index.js","webpack://Ganache/external \"crypto\"","webpack://Ganache/./lib/blockchain_double.js","webpack://Ganache/external \"merkle-patricia-tree\"","webpack://Ganache/external \"fs\"","webpack://Ganache/./lib/database/txserializer.js","webpack://Ganache/external \"web3-core-helpers\"","webpack://Ganache/external \"web3-core-method\"","webpack://Ganache/external \"web3-net\"","webpack://Ganache/external \"web3-eth-personal\"","webpack://Ganache/./lib/utils/txrejectederror.js","webpack://Ganache/./lib/utils/block_helper.js","webpack://Ganache/./public-exports.js","webpack://Ganache/external \"web3-provider-engine\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subscriptions\"","webpack://Ganache/./lib/subproviders/requestfunnel.js","webpack://Ganache/./lib/subproviders/delayedblockfilter.js","webpack://Ganache/./lib/subproviders/gethdefaults.js","webpack://Ganache/./lib/subproviders/geth_api_double.js","webpack://Ganache/./lib/statemanager.js","webpack://Ganache/external \"ethereumjs-abi\"","webpack://Ganache/external \"assert\"","webpack://Ganache/external \"seedrandom\"","webpack://Ganache/external \"bip39\"","webpack://Ganache/external \"safe-buffer\"","webpack://Ganache/external \"randombytes\"","webpack://Ganache/external \"scrypt.js\"","webpack://Ganache/external \"uuid/v4\"","webpack://Ganache/external \"bs58check\"","webpack://Ganache/./node_modules/ethereumjs-wallet/hdkey.js","webpack://Ganache/external \"hdkey\"","webpack://Ganache/external \"ethereumjs-vm\"","webpack://Ganache/external \"heap\"","webpack://Ganache/./lib/database.js","webpack://Ganache/./lib/database/leveluparrayadapter.js","webpack://Ganache/./lib/database/levelupobjectadapter.js","webpack://Ganache/external \"levelup\"","webpack://Ganache/external \"encoding-down\"","webpack://Ganache/./lib/database/filedown.js","webpack://Ganache/external \"abstract-leveldown\"","webpack://Ganache/external \"path\"","webpack://Ganache/external \"cachedown\"","webpack://Ganache/./lib/database/blockserializer.js","webpack://Ganache/./lib/database/bufferserializer.js","webpack://Ganache/./lib/database/blocklogsserializer.js","webpack://Ganache/./lib/database/receiptserializer.js","webpack://Ganache/external \"tmp\"","webpack://Ganache/./lib/utils/gas/estimateGas.js","webpack://Ganache/./lib/utils/gas/guestimation.js","webpack://Ganache/./lib/utils/gas/binSearch.js","webpack://Ganache/./lib/utils/forkedblockchain.js","webpack://Ganache/./lib/utils/forkedstoragetrie.js","webpack://Ganache/external \"merkle-patricia-tree/baseTrie\"","webpack://Ganache/external \"merkle-patricia-tree/checkpoint-interface\"","webpack://Ganache/./node_modules/web3-eth/src/index.js","webpack://Ganache/external \"web3-core-subscriptions\"","webpack://Ganache/external \"web3-eth-ens\"","webpack://Ganache/external \"web3-eth-contract\"","webpack://Ganache/external \"web3-eth-iban\"","webpack://Ganache/./node_modules/web3-eth-accounts/src/index.js","webpack://Ganache/external \"any-promise\"","webpack://Ganache/external \"eth-lib/lib/account\"","webpack://Ganache/external \"eth-lib/lib/hash\"","webpack://Ganache/external \"eth-lib/lib/rlp\"","webpack://Ganache/external \"eth-lib/lib/bytes\"","webpack://Ganache/external \"crypto-browserify\"","webpack://Ganache/external \"@web3-js/scrypt-shim\"","webpack://Ganache/external \"uuid\"","webpack://Ganache/external \"web3-eth-abi\"","webpack://Ganache/./node_modules/web3-eth/src/getNetworkType.js","webpack://Ganache/external \"web3-shh\"","webpack://Ganache/external \"web3-bzz\"","webpack://Ganache/external \"eth-sig-util\"","webpack://Ganache/external \"rlp\"","webpack://Ganache/./lib/utils/random.js","webpack://Ganache/./lib/block_tracker.js","webpack://Ganache/./lib/server.js","webpack://Ganache/./lib/webSocketServer.js","webpack://Ganache/external \"websocket\"","webpack://Ganache/./lib/httpServer.js","webpack://Ganache/external \"http\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","utils","buffer","val","data","indexOf","slice","length","Buffer","from","isBuffer","hex","trim","BN","intToHex","toString","addHexPrefix","_rpcQuantityHexString","this","replace","rpcQuantityHexString","rpcDataHexString","Array","fill","join","nullableRpcDataHexString","rpcDataHex","nullableRpcQuantityHexString","rpcQuantityHex","hexWithZeroPadding","digits","number","parseInt","bufVal","toBuffer","bufferToInt","rpcError","id","code","msg","JSON","stringify","jsonrpc","error","message","require","inherits","to","abi","RuntimeError","transactions","vmOutput","Error","captureStackTrace","constructor","results","hashes","combine","err","keys","push","apply","tx","result","execResult","exceptionError","reason","hash","returnData","returnValue","rawDecode","program_counter","runState","programCounter","return","exceptionResult","count","fromResults","EthereumJsTransaction","Transaction","EthereumJsFakeTransaction","FakeTransaction","Common","default","ethUtil","assert","rlp","sign","fakeHash","_hash","arguments","BUFFER_ZERO","fixProps","_originals","forEach","fieldName","fieldLength","index","_fields","descriptor","getOwnPropertyDescriptor","set","v","configZeroableField","isFake","configurable","getSenderAddress","_from","[object Object]","type","types","none","common","chainId","forCustomChain","networkId","comment","bootstrapNodes","super","undefined","ganacheTxCommon","decode","self","isArray","field","_chainId","raw","initData","signed","fake","json","hardfork","toAccount","buf","equals","setLengthLeft","input","options","nonce","gasLimit","gas","gasPrice","Math","floor","_type","_options","expectedNonce","isSigned","block","transactionIndex","txns","blockHash","blockNumber","header","Log","toJSON","logIndex","transactionHash","address","topics","Receipt","logs","gasUsed","cumulativeGasUsed","contractAddress","status","logsBloom","txHash","map","log","LevelUpOutOfRangeError","len","BlockOutOfRangeError","version","core","Eth","Net","Personal","Shh","Bzz","Web3","_this","packageInit","eth","shh","bzz","setProvider","provider","net","addProviders","ProviderEngine","SubscriptionSubprovider","RequestFunnel","DelayedBlockFilter","GethDefaults","GethApiDouble","BlockTracker","EventEmitter","_","Provider","_applyDefaultOptions","gethApiDouble","engine","blockTracker","blockchain","state","subscriptionSubprovider","manager","addProvider","setMaxListeners","start","sendAsync","send","close","_queueRequest","_processRequestQueue","on","notification","emit","defaultOptions","vmErrorsOnRPCResponse","verbose","asyncRequestProcessing","logger","merge","payload","callback","externalize","cloneDeep","intermediary","response","reportErrorInResponse","split","process","nextTick","stopMining","stop","_requestQueue","setImmediate","_requestInProgress","args","shift","cleanUpErrorObject","errorObject","stack","transactionMethods","Set","_isTransactionRequest","request","has","method","_typeof","iterator","obj","crypto","randomBytes","scryptsy","uuidv4","bs58check","decipherBuffer","decipher","concat","update","final","Wallet","priv","pub","isValidPrivate","isValidPublic","_privKey","_pubKey","privateToPublic","privKey","generate","icapDirect","max","privateToAddress","lte","generateVanityAddress","pattern","RegExp","test","getPrivateKey","getPrivateKeyString","bufferToHex","getPublicKey","pubKey","getPublicKeyString","getAddress","publicToAddress","getAddressString","getChecksumAddressString","toChecksumAddress","toV3","password","opts","derivedKey","salt","iv","kdf","kdfparams","dklen","prf","pbkdf2Sync","cipher","createCipheriv","ciphertext","mac","keccak256","random","uuid","cipherparams","getV3Filename","timestamp","Date","toV3String","fromPublicKey","nonStrict","importPublic","fromExtendedPublicKey","fromPrivateKey","fromExtendedPrivateKey","tmp","fromV1","parse","Version","Crypto","KeyHeader","Kdf","KdfParams","Salt","N","R","P","DkLen","CipherText","MAC","seed","createDecipheriv","IV","fromV3","toLowerCase","fromEthSale","encseed","wallet","ethaddr","Account","Block","VM","Trie","async","Heap","Database","estimateGas","promisify","BlockchainDouble","console","trie","db_path","pending_transactions","blockGasLimit","defaultTransactionGasLimit","timeAdjustment","time","debug","allowUnlimitedContractSize","assign","initialize","accounts","latestBlock","stateRoot","stateTrie","createStateTrie","trie_db","vm","createVMFromStateTrie","setTime","createGenesisBlock","stateManager","checkpoint","eachSeries","accountData","finished","putAccount","account","commit","putBlock","activatePrecompiles","network_id","forkVersion","getBlock","done","e","info","opcode","argsNum","in","arg","db","createBlock","blocks","last","getEffectiveBlockNumber","getHeight","blockHashes","blockIndex","first","receipts","requests","blockLogs","transactionReceipts","parallel","popBlock","del","pop","series","newLastBlock","setStateRoot","_storageTries","clearPendingTransactions","parent","emulateParent","getParent","parentHash","parentNumber","currentTime","getQueuedNonce","addressBuffer","pendingNonce","gt","iaddn","toArrayLike","queueTransaction","sortByPriceAndNonce","sortedByNonce","arr","nonceSort","a","b","sort","heap","sortedTransactions","size","best","getReadyCall","readyCall","parentBlock","newBlock","runArgs","skipBalance","skipNonce","processCall","runTx","catch","vmerr","processBlock","runBlock","skipBlockValidation","totalBlockGasUsage","txTrie","rcptTrie","promises","putInTrie","put","receipt","txLogs","receiptLog","j","rcpt","createdAddress","bitvector","rawReceipt","rcptBuffer","encode","serialize","Promise","all","transactionsTrie","receiptTrie","processNextBlock","currentTransactions","totalGasLimit","maxGasLimit","processTransactionTrace","params","targetHash","txHashCurrentlyProcessing","txCurrentlyProcessing","storageStack","currentDepth","returnVal","structLogs","stepListener","event","next","gasLeft","gasUsedThisStep","memory","disableMemory","match","lastItem","disableStack","item","structLog","depth","gasCost","op","pc","storage","disableStorage","processStorageTrace","getTransactionReceipt","targetBlock","forkBlockNumber","beforeTxListener","afterTxListener","removeListeners","removeListener","_cache","flush","cb","stackLength","getContractStorage","getAccount","currentStateRoot","getNonce","getBalance","balance","getStorage","position","getCode","getTransaction","notFound","pendingTxs","getBlockLogs","effective","getTime","increaseTime","seconds","date","now","sigV","commonOptions","fromJSON","TXRejectedError","includeFullTransactions","mixHash","sha3Uncles","uncleHash","bloom","transactionsRoot","receiptsRoot","miner","coinbase","difficulty","totalDifficulty","extraData","toJsonRpc","uncles","Server","server","_webpacked","Subprovider","methods","eth_call","eth_getStorageAt","eth_sendTransaction","eth_sendRawTransaction","eth_newBlockFilter","eth_getFilterChanges","eth_getFilterLogs","queue","isWorking","handleRequest","end","external","processNext","watching","handleNewBlockFilter","handleGetFilterChanges","filterId","currentBlockHash","previousBlockHash","emitPayload","res","StateManager","blockHelper","pkg","maxSafeInt","Number","MAX_SAFE_INTEGER","initialized","initialization_error","post_initialization_callbacks","callbacks","waitForInitialization","addedBlockParam","requiresDefaultBlockParameter","minLength","errorMessage","getDelayedHandler","eth_getBalance","eth_getCode","eth_getTransactionCount","eth_estimateGas","eth_accounts","eth_blockNumber","eth_chainId","eth_coinbase","eth_mining","is_mining","eth_hashrate","eth_gasPrice","eth_getBlockByNumber","eth_getBlockByHash","eth_getBlockTransactionCountByNumber","eth_getBlockTransactionCountByHash","eth_getTransactionReceipt","eth_getTransactionByHash","eth_getTransactionByBlockHashAndIndex","hashOrNumber","eth_getTransactionByBlockNumberAndIndex","getTransactionCount","eth_sign","dataToSign","eth_signTypedData","typedDataToSign","signTypedData","txData","rawTx","queueRawTransaction","_setCallGasLimit","globalCallGasLimit","callGasLimit","queueStorage","latestFilterId","mine","eth_getLogs","filter","getLogs","eth_uninstallFilter","eth_protocolVersion","bzz_hive","bzz_info","shh_version","eth_getCompilers","eth_syncing","net_listening","net_peerCount","web3_clientVersion","web3_sha3","string","net_version","miner_start","threads","startMining","miner_stop","rpc_modules","rpc","web3","evm","personal","personal_listAccounts","personal_accounts","personal_newAccount","createAccount","account_passwords","personal_importRawKey","rawKey","secretKey","personal_lockAccount","unlocked_accounts","personal_unlockAccount","duration","storedPassword","personal_sendTransaction","ret","evm_snapshot","snapshot","evm_revert","snapshotId","revert","evm_increaseTime","evm_setTime","evm_mine","debug_traceTransaction","queueTransactionTrace","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_getUncleByBlockHashAndIndex","eth_getUncleByBlockNumberAndIndex","uncleIndex","eth_getWork","eth_submitWork","powHash","digest","eth_submitHashrate","hashRate","clientID","db_putString","dbName","db_getString","db_putHex","db_getHex","shh_post","priority","ttl","shh_newIdentity","shh_hasIdentity","shh_newGroup","shh_addToGroup","shh_newFilter","shh_uninstallFilter","shh_getFilterChanges","shh_getMessages","seedrandom","bip39","hdkey","ForkedBlockchain","fs","sigUtil","ZERO_BUFFER","fork","secure","total_accounts","latest_filter_id","action_queue","action_processing","snapshots","mnemonic","fromMasterSeed","mnemonicToSeed","wallet_hdpath","hdPath","gasPriceVal","blockTime","is_mining_on_interval","mining_interval_timeout","_provider","default_balance_ether","randomAlphaNumericString","entropyToMnemonic","defaultBalanceWei","toWei","reduce","idx","account_keys_path","fileData","addresses","private_keys","writeFileSync","mineOnInterval","_minerCancellationToken","clearTimeout","cancelled","cancellationToken","timeout","setTimeout","unref","derivePath","getWallet","publicKey","_queueTransaction","processNextAction","txJsonRpc","isKnownAccount","_setTransactionDefaults","isTransaction","allocUnsafe","override","queued","processTransaction","processGasEstimate","msgHash","hashPersonalMessage","sgn","ecsign","toRpcSig","EIP712Domain","domain","primaryType","signTypedData_v4","printTransactionReceipt","runtimeError","finishedPrinting","processBlocks","totalBlocks","amountProcessed","whilst","createTransactionWithCorrectNonce","gasEstimate","expectedAddress","expectedTopics","fromBlock","toBlock","current","filtered","keep","expectedTopic","logTopic","isMatch","includes","nextSnapshot","during","doneWithTest","nextBlock","hasContractCode","getContractCode","isUnlocked","validateNonce","resolve","expected","actual","reject","then","HDKey","EthereumHDKey","fromHDKey","_hdkey","seedBuffer","fromExtendedKey","base58key","privateExtendedKey","publicExtendedKey","path","derive","deriveChild","_privateKey","_publicKey","LevelUpArrayAdapter","LevelUpObjectAdapter","levelup","filedown","cachedown","txserializer","blockserializer","bufferserializer","BlockLogsSerializer","ReceiptSerializer","directory","finishInitializing","levelupOptions","valueEncoding","store","maxSize","dir","Sublevel","serializer","sublevel","_get","_put","encoded","RangeError","newLength","valueserializer","keyserializer","encodedKey","decodedValue","batch","array","each","isOpen","util","AbstractLevelDOWN","FileDown","location","_open","writeFile","readFile","_del","unlink","_batch","txJson","database","binSearch","generateVM","bn","STIPEND","check","opname","isCall","isCallOrCallcode","isCreate","isTerminator","steps","stepTracker","collect","Context","fee","base","cost","sixtyFloorths","ops","intermediateCost","sub","callingFee","compositeContext","addGas","gtn","gte","isub","iadd","setStart","setStop","getCost","transfer","ctx","values","addSixtyFloorth","sixtyFloorth","addRange","add","finalizeRange","range","isZero","innerCost","divn","estimate","actualUsed","sysops","systemOps","opIndex","cursor","context","currentIndex","isPrecompile","getTotal","sysOps","allOps","preCompile","preCompileCheck","precompileCallDepth","clone","MAX","hexToBn","gasRefund","startingGas","lo","hi","isEnoughGas","muln","addn","lt","mid","ForkedStorageTrie","httpReg","protocolReg","validProtocolReg","fork_block_number","providers","HttpProvider","WebsocketProvider","storageTrieCache","patchVM","getId","_trie","lookupAccount","getLookupAccount","_lookupAccount","_lookupStorageTrie","getLookupStorageTrie","storageTrie","copy","isFallbackBlock","isBlockHash","byteLength","isFallbackBlockHash","getFallbackBlock","numberOrHash","real","checkFn","isFallback","getRelativeBlockNumber","keyExists","exists","keyIsDeleted","deleted","fetchCodeFromFallback","fetchAccountFromFallback","acc","receiptJson","fetchBalanceFromFallback","fetchNonceFromFallback","setCode","getSafeFallbackBlockNumber","safeBlockNumber","toBN","relative","currentProvider","MerklePatriciaTree","BaseTrie","checkpointInterface","ForkedStorageBaseTrie","_deleted","getStorageAt","findPath","node","remainder","rpcKey","originalDelete","prove","verifyProof","helpers","Subscriptions","subscriptions","Method","ENS","BaseContract","Iban","Accounts","getNetworkType","formatter","formatters","blockCall","isString","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Contract","defaultChain","defaultHardfork","defaultCommon","defaultAccount","defaultBlock","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","inputAddressFormatter","clearSubscriptions","_requestManager","ens","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","inputDefaultBlockNumberFormatter","numberToHex","inputBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","inputTransactionFormatter","inputSignFormatter","transformPayload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","newBlockHeaders","subscriptionName","pendingTransactions","subscriptionHandler","output","removed","isFunction","syncing","_isSyncing","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","setRequestManager","Hash","RLP","Bytes","cryp","scrypt","isNot","isUndefined","isNull","BatchRequest","extend","_ethereumCall","isAddress","_accounts","defaultKeyName","_addAccountFunctions","signTransaction","privateKey","encrypt","entropy","randomHex","privateKeyToAccount","fromPrivate","transactionOptions","hasTxSigningOptions","chain","transaction","baseChain","customChain","startsWith","substring","ethTx","validationResult","validate","rawTransaction","messageHash","getChainId","getGasPrice","getNetworkId","recoverTransaction","signature","encodeSignature","recovery","toNumber","fromNumber","signingData","signingDataHex","recover","hashMessage","isHexStrict","hexToBytes","messageBuffer","preamble","preambleBuffer","ethMessage","keccak256s","vrs","decodeSignature","preFixed","isObject","isBoolean","decrypt","v3Keystore","sha3","v4","_findSafeIndex","pointer","_currentIndexes","numberOfAccounts","remove","addressOrIndex","clear","encryptedWallet","keystore","save","keyName","localStorage","setItem","load","getItem","window","x","removeItem","storageAvailable","givenId","genesis","rng","alphabet","text","charAt","GanacheBlockTracker","_blockchain","getTrackingBlock","awaitCurrentBlock","_setCurrentBlock","_currentBlock","getCurrentBlock","once","_isRunning","oldBlock","webSocketServer","httpServer","keepAliveTimeout","connectionCounter","connections","conn","oldListen","listen","ws","oldClose","destroy","websocket","WebSocketServer","ConnectionManager","connectionsBySubscriptionId","_updateSubscriptions","manageConnection","_logPayload","_handleRequest","connectionManager","wsServer","autoAcceptConnections","connection","utf8Data","binaryData","CLOSE_REASON_UNPROCESSABLE_INPUT","subscriptionId","subscription","http","sendResponse","statusCode","headers","writeHead","createServer","body","chunk","requestHeaders","origin","createCORSResponseHeaders","ganacheProvider"],"mappings":"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","file":"ganache.core.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Ganache\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ganache\"] = factory();\n\telse\n\t\troot[\"Ganache\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 35);\n","let utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  buffer: function(val) {\n    let data;\n    if (typeof val === \"string\") {\n      // strings need to be treated as hex, so we have to prep them:\n      data = val.indexOf(\"0x\") === 0 ? val.slice(2) : val;\n      data = data.length % 2 === 1 ? `0${data}` : data;\n      data = Buffer.from(data, \"hex\");\n    } else if (Buffer.isBuffer(val)) {\n      // no need to copy the Buffer to a new Buffer, so we just use the Buffer\n      // exactly as it was given to us:\n      data = val;\n    } else {\n      // all other types get the Buffer treatment and built-in type checking:\n      data = Buffer.from(val);\n    }\n    return data;\n  },\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function(val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    } else if (val == null) {\n      return \"0x\";\n    } else if (typeof val === \"object\") {\n      // Support Buffer, BigInteger and BN library\n      // Hint: BN is used in ethereumjs\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n\n  _rpcQuantityHexString: function(val) {\n    val = this.hex(val);\n    // remove all zeroes leading zeros, `0+`, from the hex-encoded value\n    // This doesn't remove the last 0 which would be captured by `(.+?)`\n    val = val.replace(/^(?:0x)(?:0+(.+?))?$/, \"0x$1\");\n    return val;\n  },\n\n  rpcQuantityHexString: function(val) {\n    val = this._rpcQuantityHexString(val);\n\n    // RPC Quantities must represent `0` as `0x0`\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n\n  rpcDataHexString: function(val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n    return \"0x\" + val;\n  },\n\n  nullableRpcDataHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcDataHex = this.rpcDataHexString(val, length);\n      return rpcDataHex === \"0x\" ? null : rpcDataHex;\n    }\n  },\n\n  nullableRpcQuantityHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcQuantityHex = this._rpcQuantityHexString(val, length);\n      return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n    }\n  },\n\n  hexWithZeroPadding: function(val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n    return val;\n  },\n\n  number: function(val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  },\n\n  rpcError: function(id, code, msg) {\n    return JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: id,\n      error: {\n        code: code,\n        message: msg\n      }\n    });\n  }\n};\n","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"util\");","module.exports = require(\"async\");","module.exports = require(\"ethereumjs-common\");","module.exports = require(\"web3-provider-engine/subproviders/subprovider.js\");","var inherits = require(\"util\").inherits;\nvar to = require(\"./to\");\nvar abi = require(\"ethereumjs-abi\");\n\ninherits(RuntimeError, Error);\n\n// Note: ethereumjs-vm will return an object that has a \"results\" and \"receipts\" keys.\n// You should pass in the whole object.\nfunction RuntimeError(transactions, vmOutput) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n\n  this.results = {};\n  this.hashes = [];\n\n  // handles creating this.message\n  this.combine(transactions, vmOutput);\n}\n\nRuntimeError.prototype.combine = function(transactions, vmOutput) {\n  // Can be combined with vmOutput or another RuntimeError.\n  if (transactions instanceof RuntimeError) {\n    var err = transactions;\n    var keys = Object.keys(err.results);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      this.results[key] = err.results[key];\n      Array.prototype.push.apply(this.hashes, err.hashes);\n    }\n  } else {\n    var results = vmOutput.results;\n\n    for (i = 0; i < transactions.length; i++) {\n      var tx = transactions[i];\n      var result = results[i];\n\n      // 1 means no error, oddly.\n      if (result.execResult.exceptionError) {\n        var hash = to.hex(tx.hash());\n        this.hashes.push(hash);\n        var reason;\n        var returnData = result.execResult.returnValue;\n        if (returnData && returnData.slice(0, 4).toString(\"hex\") === \"08c379a0\") {\n          reason = abi.rawDecode([\"string\"], returnData.slice(4))[0];\n        }\n\n        this.results[hash] = {\n          error: result.execResult.exceptionError.error || result.execResult.exceptionError,\n          program_counter: result.execResult.runState.programCounter,\n          return: to.hex(result.execResult.returnValue),\n          reason: reason\n        };\n      }\n    }\n  }\n\n  // Once combined, set the message\n  if (this.hashes.length === 1) {\n    var exceptionResult = this.results[this.hashes[0]];\n    var message = \"VM Exception while processing transaction: \" + exceptionResult.error;\n    if (exceptionResult.reason) {\n      message += \" \" + exceptionResult.reason;\n    }\n    this.message = message;\n  } else {\n    message = \"Multiple VM Exceptions while processing transactions: \\n\\n\";\n\n    for (i = 0; i < this.hashes.length; i++) {\n      hash = this.hashes[i];\n      exceptionResult = this.results[hash];\n      message += hash + \": \" + exceptionResult.error;\n      if (exceptionResult.reason) {\n        message += \" \" + exceptionResult.reason;\n      }\n      message += \"\\n\";\n    }\n    this.message = message;\n  }\n};\n\nRuntimeError.prototype.count = function() {\n  return Object.keys(this.results).length;\n};\n\nRuntimeError.fromResults = function(transactions, vmOutput) {\n  var err = new RuntimeError(transactions, vmOutput);\n\n  if (err.count() === 0) {\n    return null;\n  }\n\n  return err;\n};\n\nmodule.exports = RuntimeError;\n","module.exports = require(\"lodash\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"ethereumjs-account\");","const EthereumJsTransaction = require(\"ethereumjs-tx\").Transaction;\nconst EthereumJsFakeTransaction = require(\"ethereumjs-tx\").FakeTransaction;\nconst Common = require(\"ethereumjs-common\").default;\nconst ethUtil = require(\"ethereumjs-util\");\nconst assert = require(\"assert\");\nconst rlp = ethUtil.rlp;\nconst to = require(\"./to\");\n\nconst sign = EthereumJsTransaction.prototype.sign;\nconst fakeHash = function() {\n  // this isn't memoization of the hash. previous versions of ganache-core\n  // created hashes in a different/incorrect way and are recorded this way\n  // in snapshot dbs. We are preserving the chain's immutability by using the\n  // stored hash instead of calculating it.\n  if (this._hash != null) {\n    return this._hash;\n  }\n  return EthereumJsFakeTransaction.prototype.hash.apply(this, arguments);\n};\nconst BUFFER_ZERO = Buffer.from([0]);\n\nfunction configZeroableField(tx, fieldName, fieldLength = 32) {\n  const index = tx._fields.indexOf(fieldName);\n  const descriptor = Object.getOwnPropertyDescriptor(tx, fieldName);\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, fieldName, {\n    set: (v) => {\n      descriptor.set.call(tx, v);\n      v = ethUtil.toBuffer(v);\n      assert(fieldLength >= v.length, `The field ${fieldName} must not have more ${fieldLength} bytes`);\n      tx._originals[index] = v;\n    },\n    get: () => {\n      return tx._originals[index];\n    }\n  });\n}\n\n/**\n * etheruemjs-tx's Transactions don't behave quite like we need them to, so\n * we're monkey-patching them to do what we want here.\n * @param {Transaction} tx The Transaction to fix\n * @param {Object} [data] The data object\n */\nfunction fixProps(tx, data) {\n  // ethereumjs-tx doesn't allow for a `0` value in fields, but we want it to\n  // in order to differentiate between a value that isn't set and a value\n  // that is set to 0 in a fake transaction.\n  // Once https://github.com/ethereumjs/ethereumjs-tx/issues/112 is figured\n  // out we can probably remove this fix/hack.\n  // We keep track of the original value and return that value when\n  // referenced by its property name. This lets us properly encode a `0` as\n  // an empty buffer while still being able to differentiate between a `0`\n  // and `null`/`undefined`.\n  tx._originals = [];\n  const fieldNames = [\"nonce\", \"gasPrice\", \"gasLimit\", \"value\"];\n  fieldNames.forEach((fieldName) => configZeroableField(tx, fieldName, 32));\n\n  if (tx.isFake()) {\n    /**\n     * @prop {Buffer} from (read/write) Set from address to bypass transaction\n     * signing on fake transactions.\n     */\n    Object.defineProperty(tx, \"from\", {\n      enumerable: true,\n      configurable: true,\n      get: tx.getSenderAddress.bind(tx),\n      set: (val) => {\n        if (val) {\n          tx._from = ethUtil.toBuffer(val);\n        } else {\n          tx._from = null;\n        }\n      }\n    });\n\n    if (data && data.from) {\n      tx.from = data.from;\n    }\n\n    tx.hash = fakeHash;\n  }\n}\n\n/**\n * Parses the given data object and adds its properties to the given tx.\n * @param {Transaction} tx\n * @param {Object} [data]\n */\nfunction initData(tx, data) {\n  if (data) {\n    if (typeof data === \"string\") {\n      data = to.buffer(data);\n    }\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n    const self = tx;\n    if (Array.isArray(data)) {\n      if (data.length > tx._fields.length) {\n        throw new Error(\"wrong number of fields in data\");\n      }\n\n      // make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = ethUtil.toBuffer(d);\n      });\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\n      const keys = Object.keys(data);\n      tx._fields.forEach(function(field) {\n        if (keys.indexOf(field) !== -1) {\n          self[field] = data[field];\n        }\n        if (field === \"gasLimit\") {\n          if (keys.indexOf(\"gas\") !== -1) {\n            self[\"gas\"] = data[\"gas\"];\n          }\n        } else if (field === \"data\") {\n          if (keys.indexOf(\"input\") !== -1) {\n            self[\"input\"] = data[\"input\"];\n          }\n        }\n      });\n\n      // Set chainId value from the data, if it's there and the data didn't\n      // contain a `v` value with chainId in it already. If we do have a\n      // data.chainId value let's set the interval v value to it.\n      if (!tx._chainId && data && data.chainId != null) {\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\n      }\n    } else {\n      throw new Error(\"invalid data\");\n    }\n  }\n}\n\nmodule.exports = class Transaction extends EthereumJsTransaction {\n  /**\n   * @param {Object} [data] The data for this Transaction.\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   * @param {Object} [common] EthereumJS common.fromCustomChain()\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  constructor(data, type = Transaction.types.none, common) {\n    if (data.chainId && !common) {\n      common = Common.forCustomChain(\n        \"mainnet\", // TODO needs to match chain id\n        {\n          name: \"ganache\",\n          networkId: 1,\n          chainId: data.chainId,\n          comment: \"Local test network\",\n          bootstrapNodes: []\n        },\n        \"istanbul\"\n      );\n    }\n    super(undefined, { common });\n\n    this.ganacheTxCommon = common;\n    this.type = type;\n\n    fixProps(this, data);\n    initData(this, data);\n  }\n\n  static get types() {\n    // values must be powers of 2\n    return {\n      none: 0,\n      signed: 1,\n      fake: 2\n    };\n  }\n\n  /**\n   * Prepares arbitrary JSON data for use in a Transaction.\n   * @param {Object} json JSON object representing the Transaction\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   * @param {Object} [common] EthereumJS common.fromCustomChain()\n   * @param {Number} [networkId]\n   * @param {string} [hardfork]\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  static fromJSON(json, type, common, networkId, hardfork) {\n    let toAccount;\n    if (json.to) {\n      // Remove all padding and make it easily comparible.\n      const buf = to.buffer(json.to);\n      if (buf.equals(Buffer.from([0]))) {\n        // if the address is 0x0 make it 0x0{20}\n        toAccount = ethUtil.setLengthLeft(buf, 20);\n      } else {\n        toAccount = buf;\n      }\n    }\n    const data = json.data || json.input;\n    const options = {\n      nonce: ethUtil.toBuffer(to.hex(json.nonce)),\n      from: ethUtil.toBuffer(to.hex(json.from)),\n      value: ethUtil.toBuffer(to.hex(json.value)),\n      gasLimit: ethUtil.toBuffer(to.hex(json.gas || json.gasLimit)),\n      gasPrice: ethUtil.toBuffer(to.hex(json.gasPrice)),\n      data: data ? to.buffer(data) : null,\n      to: toAccount,\n      v: ethUtil.toBuffer(json.v),\n      r: ethUtil.toBuffer(json.r),\n      s: ethUtil.toBuffer(json.s)\n    };\n    if (!common && options.v.length > 0) {\n      const chainId = Math.floor((json.v - 35) / 2);\n      common = Common.forCustomChain(\n        \"mainnet\", // TODO needs to match chain id\n        {\n          name: \"ganache\",\n          networkId: networkId,\n          chainId: chainId >= 0 ? chainId : 1,\n          comment: \"Local test network\",\n          bootstrapNodes: []\n        },\n        hardfork\n      );\n    }\n    const tx = new Transaction(options, type, common);\n    tx._hash = json.hash ? to.buffer(json.hash) : null;\n    return tx;\n  }\n\n  /**\n   * Encodes the Transaction in order to be used in a database. Can be decoded\n   * into an identical Transaction via `Transaction.decode(encodedTx)`.\n   */\n  encode() {\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(this.hash()),\n      nonce: to.nullableRpcQuantityHexString(this.nonce) || \"0x\",\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.nullableRpcQuantityHexString(this.value),\n      gas: to.nullableRpcQuantityHexString(this.gasLimit),\n      gasPrice: to.nullableRpcQuantityHexString(this.gasPrice),\n      data: this.data ? this.data.toString(\"hex\") : null,\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcQuantityHexString(this.r),\n      s: to.nullableRpcQuantityHexString(this.s),\n      _type: this.type,\n      _options: {\n        hardfork: this.ganacheTxCommon.hardfork(),\n        chainId: this.ganacheTxCommon.chainId(),\n        networkId: this.ganacheTxCommon.networkId()\n      }\n    };\n    return resultJSON;\n  }\n\n  isFake() {\n    return (this.type & Transaction.types.fake) === Transaction.types.fake;\n  }\n\n  isSigned() {\n    return (this.type & Transaction.types.signed) === Transaction.types.signed;\n  }\n\n  /**\n   * Compares the transaction's nonce value to the given expectedNonce taking in\n   * to account the type of transaction and comparison rules for each type.\n   *\n   * In a signed transaction a nonce of Buffer([]) is the same as Buffer([0]),\n   * but in a fake transaction Buffer([]) is null and Buffer([0]) is 0.\n   *\n   * @param {Buffer} expectedNonce The value of the from account's next nonce.\n   */\n  validateNonce(expectedNonce) {\n    let nonce;\n    if (this.isSigned() && this.nonce.length === 0) {\n      nonce = BUFFER_ZERO;\n    } else {\n      nonce = this.nonce;\n    }\n    return nonce.equals(expectedNonce);\n  }\n\n  /**\n   * Signs the transaction and sets the `type` bit for `signed` to 1,\n   * i.e., `isSigned() === true`\n   */\n  sign() {\n    sign.apply(this, arguments);\n    this.type |= Transaction.types.signed;\n  }\n\n  /**\n   * Returns a JSON-RPC spec compliant representation of this Transaction.\n   *\n   * @param {Object} block The block this Transaction appears in.\n   */\n  toJsonRpc(block) {\n    const hash = this.hash();\n\n    let transactionIndex = null;\n    for (let i = 0, txns = block.transactions, l = txns.length; i < l; i++) {\n      if (txns[i].hash().equals(hash)) {\n        transactionIndex = i;\n        break;\n      }\n    }\n\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(hash),\n      nonce: to.rpcQuantityHexString(this.nonce),\n      blockHash: to.nullableRpcDataHexString(block.hash()),\n      blockNumber: to.nullableRpcQuantityHexString(block.header.number),\n      transactionIndex: to.nullableRpcQuantityHexString(transactionIndex),\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.rpcQuantityHexString(this.value),\n      gas: to.rpcQuantityHexString(this.gasLimit),\n      gasPrice: to.rpcQuantityHexString(this.gasPrice),\n      input: to.rpcDataHexString(this.data),\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcQuantityHexString(this.r),\n      s: to.nullableRpcQuantityHexString(this.s)\n    };\n\n    return resultJSON;\n  }\n};\n","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-block\");","var to = require(\"./to.js\");\n\n// Expects:\n//\n// logIndex: ...\n// transactionIndex: ...\n// transactionHash: ...\n// block: ...\n// address: ...\n// data: ...\n// topics: ...\n// type: ...\n\nfunction Log(data) {\n  var self = this;\n  Object.keys(data).forEach(function(key) {\n    self[key] = data[key];\n  });\n}\n\nLog.prototype.toJSON = function() {\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\n  return {\n    logIndex: to.rpcQuantityHexString(this.logIndex),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    transactionHash: to.rpcDataHexString(this.transactionHash),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    address: to.rpcDataHexString(this.address),\n    data: to.rpcDataHexString(this.data),\n    topics: this.topics,\n    type: \"mined\"\n  };\n};\n\nmodule.exports = Log;\n","var to = require(\"./to\");\n\nfunction Receipt(tx, block, logs, gasUsed, cumulativeGasUsed, contractAddress, status, logsBloom) {\n  this.tx = tx;\n  this.block = block;\n  this.logs = logs;\n  this.gasUsed = gasUsed;\n  this.cumulativeGasUsed = cumulativeGasUsed;\n  this.contractAddress = contractAddress;\n  this.status = status;\n  this.logsBloom = logsBloom;\n\n  this.transactionIndex = 0;\n\n  this.txHash = tx.hash();\n\n  for (var i = 0; i < block.transactions.length; i++) {\n    var current = block.transactions[i];\n    if (current.hash().equals(this.txHash)) {\n      this.transactionIndex = i;\n      break;\n    }\n  }\n}\n\nReceipt.prototype.toJSON = function() {\n  // Enforce Hex formatting as defined in the RPC spec.\n  return {\n    transactionHash: to.rpcDataHexString(this.txHash),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    from: to.rpcDataHexString(this.tx.from),\n    to: to.nullableRpcDataHexString(this.tx.to),\n    gasUsed: to.rpcQuantityHexString(this.gasUsed),\n    cumulativeGasUsed: to.rpcQuantityHexString(this.cumulativeGasUsed),\n    contractAddress: this.contractAddress != null ? to.rpcDataHexString(this.contractAddress) : null,\n    logs: this.logs.map(function(log) {\n      return log.toJSON();\n    }),\n    status: to.rpcQuantityHexString(this.status),\n    logsBloom: to.rpcDataHexString(this.logsBloom),\n    v: to.rpcQuantityHexString(this.tx.v),\n    r: to.rpcQuantityHexString(this.tx.r),\n    s: to.rpcQuantityHexString(this.tx.s)\n  };\n};\n\nmodule.exports = Receipt;\n","module.exports = require(\"level-sublevel\");","class LevelUpOutOfRangeError extends Error {\n  constructor(type, index, len) {\n    const message = \"LevelUpArrayAdapter named '\" + type + \"' index out of range: index \" + index + \"; length: \" + len;\n    super(message);\n    this.name = `${this.constructor.name}:${type}`;\n    this.type = type;\n  }\n}\n\nclass BlockOutOfRangeError extends LevelUpOutOfRangeError {\n  constructor(index, len) {\n    super(\"blocks\", index, len);\n  }\n}\n\nmodule.exports = {\n  LevelUpOutOfRangeError,\n  BlockOutOfRangeError\n};\n","module.exports = require(\"events\");","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar version = require('../package.json').version;\nvar core = require('web3-core');\nvar Eth = require('web3-eth');\nvar Net = require('web3-net');\nvar Personal = require('web3-eth-personal');\nvar Shh = require('web3-shh');\nvar Bzz = require('web3-bzz');\nvar utils = require('web3-utils');\n\nvar Web3 = function Web3() {\n    var _this = this;\n\n    // sets _requestmanager etc\n    core.packageInit(this, arguments);\n\n    this.version = version;\n    this.utils = utils;\n\n    this.eth = new Eth(this);\n    this.shh = new Shh(this);\n    this.bzz = new Bzz(this);\n\n    // overwrite package setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function (provider, net) {\n        setProvider.apply(_this, arguments);\n\n        this.eth.setProvider(provider, net);\n        this.shh.setProvider(provider, net);\n        this.bzz.setProvider(provider);\n\n        return true;\n    };\n};\n\nWeb3.version = version;\nWeb3.utils = utils;\nWeb3.modules = {\n    Eth: Eth,\n    Net: Net,\n    Personal: Personal,\n    Shh: Shh,\n    Bzz: Bzz\n};\n\ncore.addProviders(Web3);\n\nmodule.exports = Web3;\n\n","module.exports = require(\"web3-core\");","module.exports = require(\"underscore\");","module.exports = require(\"web3-utils\");","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nlet ProviderEngine = require(\"web3-provider-engine\");\nlet SubscriptionSubprovider = require(\"web3-provider-engine/subproviders/subscriptions\");\n\nlet RequestFunnel = require(\"./subproviders/requestfunnel\");\nlet DelayedBlockFilter = require(\"./subproviders/delayedblockfilter\");\nlet GethDefaults = require(\"./subproviders/gethdefaults\");\nlet GethApiDouble = require(\"./subproviders/geth_api_double\");\n\nlet BlockTracker = require(\"./block_tracker\");\n\nlet RuntimeError = require(\"./utils/runtimeerror\");\nlet EventEmitter = require(\"events\");\n\nlet _ = require(\"lodash\");\n\nfunction Provider(options) {\n  const self = this;\n  EventEmitter.call(this);\n\n  this.options = options = self._applyDefaultOptions(options || {});\n\n  let gethApiDouble = new GethApiDouble(options, this);\n\n  this.engine = new ProviderEngine({\n    blockTracker: new BlockTracker({ blockchain: gethApiDouble.state.blockchain })\n  });\n\n  let subscriptionSubprovider = new SubscriptionSubprovider();\n\n  this.engine.manager = gethApiDouble;\n  this.engine.addProvider(new RequestFunnel());\n  this.engine.addProvider(new DelayedBlockFilter());\n  this.engine.addProvider(subscriptionSubprovider);\n  this.engine.addProvider(new GethDefaults());\n  this.engine.addProvider(gethApiDouble);\n\n  this.engine.setMaxListeners(100);\n  this.engine.start();\n\n  this.manager = gethApiDouble;\n  this.sendAsync = this.send.bind(this);\n  this.send = this.send.bind(this);\n  this.close = this.close.bind(this);\n  this._queueRequest = this._queueRequest.bind(this);\n  this._processRequestQueue = this._processRequestQueue.bind(this);\n\n  subscriptionSubprovider.on(\"data\", function(err, notification) {\n    self.emit(\"data\", err, notification);\n  });\n}\n\nconst defaultOptions = {\n  _chainId: 1,\n  vmErrorsOnRPCResponse: true,\n  verbose: false,\n  asyncRequestProcessing: false,\n  logger: {\n    log: function() {}\n  }\n};\n\nProvider.prototype = Object.create(EventEmitter.prototype);\nProvider.prototype.constructor = Provider;\n\nProvider.prototype._applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n\nProvider.prototype.send = function(payload, callback) {\n  if (typeof callback !== \"function\") {\n    throw new Error(\n      \"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n        \"is no longer synchronous and must be passed a callback as its final argument.\"\n    );\n  }\n\n  let self = this;\n\n  let externalize = function(payload) {\n    return _.cloneDeep(payload);\n  };\n\n  if (Array.isArray(payload)) {\n    payload = payload.map(externalize);\n  } else {\n    payload = externalize(payload);\n  }\n\n  let intermediary = function(err, result) {\n    // clone result so that we can mutate the response without worrying about\n    // that messing up assumptions the calling logic might have about us\n    // mutating things\n    result = _.cloneDeep(result);\n    let response;\n    if (Array.isArray(result)) {\n      response = [];\n      for (let i = 0; i < result.length; i++) {\n        response.push(self.reportErrorInResponse(payload[i], err, result[i]));\n      }\n    } else {\n      response = self.reportErrorInResponse(payload, err, result);\n    }\n\n    if (self.options.verbose) {\n      self.options.logger.log(\n        \" <   \" +\n          JSON.stringify(response, null, 2)\n            .split(\"\\n\")\n            .join(\"\\n <   \")\n      );\n    }\n    process.nextTick(() => callback(response.error ? err : null, response));\n  };\n\n  if (self.options.verbose) {\n    self.options.logger.log(\n      \"   > \" +\n        JSON.stringify(payload, null, 2)\n          .split(\"\\n\")\n          .join(\"\\n   > \")\n    );\n  }\n\n  if (self.options.asyncRequestProcessing) {\n    self.engine.sendAsync(payload, intermediary);\n  } else {\n    self._queueRequest(payload, intermediary);\n  }\n};\n\nProvider.prototype.close = function(callback) {\n  // This is a little gross reaching, but...\n  this.manager.state.stopMining();\n  this.manager.state.blockchain.close(callback);\n  this.engine.stop();\n};\n\nProvider.prototype._queueRequest = function(payload, intermediary) {\n  if (!this._requestQueue) {\n    this._requestQueue = [];\n  }\n\n  this._requestQueue.push({\n    payload: payload,\n    callback: intermediary\n  });\n\n  setImmediate(this._processRequestQueue);\n};\n\nProvider.prototype._processRequestQueue = function() {\n  const self = this;\n\n  if (self._requestInProgress) {\n    return;\n  }\n\n  self._requestInProgress = true;\n\n  let args = self._requestQueue.shift();\n\n  if (args) {\n    self.engine.sendAsync(args.payload, (err, result) => {\n      if (self._requestQueue.length > 0) {\n        setImmediate(self._processRequestQueue);\n      }\n      args.callback(err, result);\n      self._requestInProgress = false;\n    });\n  } else {\n    // still need to free the lock\n    self._requestInProgress = false;\n\n    if (self._requestQueue.length > 0) {\n      setImmediate(self._processRequestQueue);\n    }\n  }\n};\n\nProvider.prototype.cleanUpErrorObject = function(err, response) {\n  // Our response should already have an error field at this point, if it\n  // doesn't, this was likely intentional. If not, this is the wrong place to\n  // fix that problem.\n  if (!err || !response.error) {\n    return response;\n  }\n\n  let errorObject = {\n    error: {\n      data: {}\n    }\n  };\n\n  if (err.message) {\n    // clean up the error reporting done by the provider engine so the error message isn't lost in the stack trace noise\n    errorObject.error.message = err.message;\n    errorObject.error.data.stack = err.stack;\n    errorObject.error.data.name = err.name;\n    if (\"code\" in err) {\n      errorObject.error.code = err.code;\n    }\n  } else if (!response.error) {\n    errorObject.error = {\n      message: err.toString()\n    };\n  }\n\n  return _.merge(response, errorObject);\n};\n\n// helper set of RPC methods which execute code and respond with a transaction hash as their result\nconst transactionMethods = new Set([\"eth_sendTransaction\", \"eth_sendRawTransaction\", \"personal_sendTransaction\"]);\n\nProvider.prototype._isTransactionRequest = function(request) {\n  return transactionMethods.has(request.method);\n};\n\nProvider.prototype.reportErrorInResponse = function(request, err, response) {\n  const self = this;\n\n  if (!err) {\n    return response;\n  }\n\n  // TODO: for next major release: move reporting of tx hash on error to error\n  // field to prevent poorly-written clients which assume that the existence of\n  // the \"result\" field implies no errors from breaking.\n  if (self._isTransactionRequest(request)) {\n    if (err instanceof RuntimeError) {\n      // Make sure we always return the transaction hash on failed transactions so\n      // the caller can get their tx receipt. This breaks JSONRPC 2.0, but it's how\n      // we've always done it.\n      response.result = err.hashes[0];\n\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        delete response.error;\n      }\n    }\n  }\n\n  if (request.method === \"eth_call\") {\n    if (err instanceof RuntimeError) {\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        response.result = err.results[err.hashes[0]].return || \"0x\";\n        delete response.error;\n      }\n    }\n  }\n\n  return self.cleanUpErrorObject(err, response);\n};\n\nmodule.exports = Provider;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Buffer = require('safe-buffer').Buffer;\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar randomBytes = require('randombytes');\nvar scryptsy = require('scrypt.js');\nvar uuidv4 = require('uuid/v4');\nvar bs58check = require('bs58check');\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction decipherBuffer(decipher, data) {\n  return Buffer.concat([decipher.update(data), decipher.final()]);\n}\n\nvar Wallet = function Wallet(priv, pub) {\n  if (priv && pub) {\n    throw new Error('Cannot supply both a private and a public key to the constructor');\n  }\n\n  if (priv && !ethUtil.isValidPrivate(priv)) {\n    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n  }\n\n  if (pub && !ethUtil.isValidPublic(pub)) {\n    throw new Error('Invalid public key');\n  }\n\n  this._privKey = priv;\n  this._pubKey = pub;\n};\n\nObject.defineProperty(Wallet.prototype, 'privKey', {\n  get: function get() {\n    assert(this._privKey, 'This is a public key only wallet');\n    return this._privKey;\n  }\n});\n\nObject.defineProperty(Wallet.prototype, 'pubKey', {\n  get: function get() {\n    if (!this._pubKey) {\n      this._pubKey = ethUtil.privateToPublic(this.privKey);\n    }\n    return this._pubKey;\n  }\n});\n\nWallet.generate = function (icapDirect) {\n  if (icapDirect) {\n    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n    while (true) {\n      var privKey = randomBytes(32);\n      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {\n        return new Wallet(privKey);\n      }\n    }\n  } else {\n    return new Wallet(randomBytes(32));\n  }\n};\n\nWallet.generateVanityAddress = function (pattern) {\n  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {\n    pattern = new RegExp(pattern);\n  }\n\n  while (true) {\n    var privKey = randomBytes(32);\n    var address = ethUtil.privateToAddress(privKey);\n\n    if (pattern.test(address.toString('hex'))) {\n      return new Wallet(privKey);\n    }\n  }\n};\n\nWallet.prototype.getPrivateKey = function () {\n  return this.privKey;\n};\n\nWallet.prototype.getPrivateKeyString = function () {\n  return ethUtil.bufferToHex(this.getPrivateKey());\n};\n\nWallet.prototype.getPublicKey = function () {\n  return this.pubKey;\n};\n\nWallet.prototype.getPublicKeyString = function () {\n  return ethUtil.bufferToHex(this.getPublicKey());\n};\n\nWallet.prototype.getAddress = function () {\n  return ethUtil.publicToAddress(this.pubKey);\n};\n\nWallet.prototype.getAddressString = function () {\n  return ethUtil.bufferToHex(this.getAddress());\n};\n\nWallet.prototype.getChecksumAddressString = function () {\n  return ethUtil.toChecksumAddress(this.getAddressString());\n};\n\n// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\nWallet.prototype.toV3 = function (password, opts) {\n  assert(this._privKey, 'This is a public key only wallet');\n\n  opts = opts || {};\n  var salt = opts.salt || randomBytes(32);\n  var iv = opts.iv || randomBytes(16);\n\n  var derivedKey;\n  var kdf = opts.kdf || 'scrypt';\n  var kdfparams = {\n    dklen: opts.dklen || 32,\n    salt: salt.toString('hex')\n  };\n\n  if (kdf === 'pbkdf2') {\n    kdfparams.c = opts.c || 262144;\n    kdfparams.prf = 'hmac-sha256';\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    // FIXME: support progress reporting callback\n    kdfparams.n = opts.n || 262144;\n    kdfparams.r = opts.r || 8;\n    kdfparams.p = opts.p || 1;\n    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else {\n    throw new Error('Unsupported kdf');\n  }\n\n  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));\n\n  return {\n    version: 3,\n    id: uuidv4({ random: opts.uuid || randomBytes(16) }),\n    address: this.getAddress().toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: opts.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    }\n  };\n};\n\nWallet.prototype.getV3Filename = function (timestamp) {\n  /*\n   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n   * is a pain in Javascript, everbody knows that. We could use moment.js,\n   * but decide to do it manually in order to save space.\n   *\n   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n   * but does it really matter?\n   *\n   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n   *\n   */\n  var ts = timestamp ? new Date(timestamp) : new Date();\n\n  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n};\n\nWallet.prototype.toV3String = function (password, opts) {\n  return JSON.stringify(this.toV3(password, opts));\n};\n\nWallet.fromPublicKey = function (pub, nonStrict) {\n  if (nonStrict) {\n    pub = ethUtil.importPublic(pub);\n  }\n  return new Wallet(null, pub);\n};\n\nWallet.fromExtendedPublicKey = function (pub) {\n  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');\n  pub = bs58check.decode(pub).slice(45);\n  // Convert to an Ethereum public key\n  return Wallet.fromPublicKey(pub, true);\n};\n\nWallet.fromPrivateKey = function (priv) {\n  return new Wallet(priv);\n};\n\nWallet.fromExtendedPrivateKey = function (priv) {\n  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');\n  var tmp = bs58check.decode(priv);\n  assert(tmp[45] === 0, 'Invalid extended private key');\n  return Wallet.fromPrivateKey(tmp.slice(46));\n};\n\n// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec\nWallet.fromV1 = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  if (json.Version !== '1') {\n    throw new Error('Not a V1 wallet');\n  }\n\n  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var kdfparams = json.Crypto.KeyHeader.KdfParams;\n  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n\n  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n\n  if (mac.toString('hex') !== json.Crypto.MAC) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.keccak256(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\nWallet.fromV3 = function (input, password, nonStrict) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n\n  if (json.version !== 3) {\n    throw new Error('Not a V3 wallet');\n  }\n\n  var derivedKey;\n  var kdfparams;\n  if (json.crypto.kdf === 'scrypt') {\n    kdfparams = json.crypto.kdfparams;\n\n    // FIXME: support progress reporting callback\n    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    kdfparams = json.crypto.kdfparams;\n\n    if (kdfparams.prf !== 'hmac-sha256') {\n      throw new Error('Unsupported parameters to PBKDF2');\n    }\n\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n  if (mac.toString('hex') !== json.crypto.mac) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\n/*\n * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n * JSON fields: encseed, ethaddr, btcaddr, email\n */\nWallet.fromEthSale = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var encseed = Buffer.from(json.encseed, 'hex');\n\n  // key derivation\n  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n\n  // seed decoding (IV is first 16 bytes)\n  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n  //       see also http://stackoverflow.com/a/31614770/4964819\n  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n  var seed = decipherBuffer(decipher, encseed.slice(16));\n\n  var wallet = new Wallet(ethUtil.keccak256(seed));\n  if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n    throw new Error('Decoded key mismatch - possibly wrong passphrase');\n  }\n  return wallet;\n};\n\nmodule.exports = Wallet;","module.exports = require(\"crypto\");","var to = require(\"./utils/to.js\");\nvar Account = require(\"ethereumjs-account\").default;\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./utils/log\");\nvar Receipt = require(\"./utils/receipt\");\nvar VM = require(\"ethereumjs-vm\").default;\nvar Common = require(\"ethereumjs-common\").default;\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Trie = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar async = require(\"async\");\nvar Heap = require(\"heap\");\nvar Database = require(\"./database\");\nvar EventEmitter = require(\"events\");\nvar estimateGas = require(\"./utils/gas/estimateGas\");\nvar _ = require(\"lodash\");\nvar promisify = require(\"util\").promisify;\nconst BN = utils.BN;\n\nfunction BlockchainDouble(options) {\n  var self = this;\n  EventEmitter.apply(self);\n\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  this.logger = options.logger || console;\n\n  this.data = new Database(options);\n\n  if (options.trie != null && options.db_path != null) {\n    throw new Error(\"Can't initialize a TestRPC with a db and a custom trie.\");\n  }\n\n  this.pending_transactions = [];\n\n  // updated periodically to keep up with the times\n  this.blockGasLimit = options.gasLimit;\n  this.defaultTransactionGasLimit = options.defaultTransactionGasLimit;\n  this.timeAdjustment = 0;\n}\n\nconst defaultOptions = {\n  gasLimit: \"0x6691b7\",\n  defaultTransactionGasLimit: \"0x15f90\",\n  time: null,\n  debug: false,\n  hardfork: \"istanbul\",\n  allowUnlimitedContractSize: false\n};\n\n// inheritence w/ prototype chaining\nBlockchainDouble.prototype = Object.create(EventEmitter.prototype);\nBlockchainDouble.prototype.constructor = BlockchainDouble;\n\nBlockchainDouble.prototype._applyDefaultOptions = function(options) {\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nBlockchainDouble.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.data.initialize(function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      var options = self.options;\n\n      var root = null;\n\n      if (block) {\n        root = block.header.stateRoot;\n      }\n\n      // I haven't yet found a good way to do this. Getting the trie from the\n      // forked blockchain without going through the other setup is a little gross.\n      self.stateTrie = self.createStateTrie(self.data.trie_db, root);\n\n      self.vm = options.vm || self.createVMFromStateTrie(self.stateTrie, true);\n\n      if (options.time) {\n        self.setTime(options.time);\n      }\n\n      // If we already have a block, then that means there's an existing chain.\n      // Don't create a genesis block.\n      if (block) {\n        self.emit(\"block\", block);\n        return callback();\n      }\n\n      self.createGenesisBlock(function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        accounts = accounts || [];\n\n        self.vm.stateManager.checkpoint(() => {\n          async.eachSeries(\n            accounts,\n            function(accountData, finished) {\n              self.vm.stateManager.putAccount(utils.toBuffer(accountData.address), accountData.account, finished);\n            },\n            function(err) {\n              if (err) {\n                return callback(err);\n              }\n\n              self.vm.stateManager.commit(() => {\n                // Create first block\n                self.putBlock(block, [], [], callback);\n              });\n            }\n          );\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.createVMFromStateTrie = function(state, activatePrecompiles) {\n  const self = this;\n  const common = Common.forCustomChain(\n    \"mainnet\", // TODO needs to match chain id\n    {\n      name: \"ganache\",\n      networkId: self.options.network_id || self.forkVersion,\n      chainId: self.options._chainId,\n      comment: \"Local test network\",\n      bootstrapNodes: []\n    },\n    self.options.hardfork\n  );\n\n  const vm = new VM({\n    state: state,\n    common,\n    blockchain: {\n      // EthereumJS VM needs a blockchain object in order to get block information.\n      // When calling getBlock() it will pass a number that's of a Buffer type.\n      // Unfortunately, it uses a 64-character buffer (when converted to hex) to\n      // represent block numbers as well as block hashes. Since it's very unlikely\n      // any block number will get higher than the maximum safe Javascript integer,\n      // we can convert this buffer to a number ahead of time before calling our\n      // own getBlock(). If the conversion succeeds, we have a block number.\n      // If it doesn't, we have a block hash. (Note: Our implementation accepts both.)\n      getBlock: function(number, done) {\n        try {\n          number = to.number(number);\n        } catch (e) {\n          // Do nothing; must be a block hash.\n        }\n\n        self.getBlock(number, done);\n      }\n    },\n    activatePrecompiles: activatePrecompiles || false,\n    allowUnlimitedContractSize: self.options.allowUnlimitedContractSize\n  });\n\n  if (self.options.debug === true) {\n    // log executed opcodes, including args as hex\n    vm.on(\"step\", function(info) {\n      var name = info.opcode.name;\n      var argsNum = info.opcode.in;\n      if (argsNum) {\n        var args = info.stack\n          .slice(-argsNum)\n          .map((arg) => to.hex(arg))\n          .join(\" \");\n\n        self.logger.log(`${name} ${args}`);\n      } else {\n        self.logger.log(name);\n      }\n    });\n  }\n\n  return vm;\n};\n\nBlockchainDouble.prototype.createStateTrie = function(db, root) {\n  return new Trie(db, root);\n};\n\n// Overrideable so other implementations (forking) can edit it.\nBlockchainDouble.prototype.createGenesisBlock = function(callback) {\n  this.createBlock(callback);\n};\n\nBlockchainDouble.prototype.latestBlock = function(callback) {\n  this.data.blocks.last(function(err, last) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, last);\n  });\n};\n\n// number accepts number (integer, hex) or tag (e.g., \"latest\")\nBlockchainDouble.prototype.getEffectiveBlockNumber = function(number, callback) {\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number\n  if (number.indexOf(\"0x\") >= 0) {\n    return callback(null, to.number(number));\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.getHeight(callback);\n    } else if (number === \"earliest\") {\n      return callback(null, 0);\n    }\n  }\n};\n\n// number accepts number (integer, hex), tag (e.g., \"latest\") or block hash\n// This function is used by ethereumjs-vm\nBlockchainDouble.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number or a block hash\n  if (number.indexOf(\"0x\") >= 0) {\n    var hash = number;\n\n    // block hash\n    if (hash.length > 40) {\n      this.data.blockHashes.get(to.hex(hash), function(err, blockIndex) {\n        if (err) {\n          return callback(err);\n        }\n        return self.data.blocks.get(blockIndex, callback);\n      });\n    } else {\n      // Block number\n      return this.data.blocks.get(to.number(hash), callback);\n    }\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.latestBlock(callback);\n    } else if (number === \"earliest\") {\n      return this.data.blocks.first(callback);\n    } else {\n      process.nextTick(callback, new Error(\"Invalid `blockNumber`: \\\"\" + number + \"\\\"\"));\n    }\n  }\n};\n\nBlockchainDouble.prototype.putBlock = function(block, logs, receipts, callback) {\n  var self = this;\n\n  // Lock in the state root for this block.\n  block.header.stateRoot = this.stateTrie.root;\n\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var requests = [\n      self.data.blocks.push.bind(self.data.blocks, block),\n      self.data.blockLogs.push.bind(self.data.blockLogs, logs),\n      self.data.blockHashes.set.bind(self.data.blockHashes, to.hex(block.hash()), length)\n    ];\n\n    block.transactions.forEach(function(tx, index) {\n      var txHash = to.hex(tx.hash());\n      requests.push(\n        self.data.transactions.set.bind(self.data.transactions, txHash, tx),\n        self.data.transactionReceipts.set.bind(self.data.transactionReceipts, txHash, receipts[index])\n      );\n    });\n\n    async.parallel(requests, (err, result) => {\n      if (!err) {\n        self.emit(\"block\", block);\n      }\n      callback(err, result);\n    });\n  });\n};\n\nBlockchainDouble.prototype.popBlock = function(callback) {\n  var self = this;\n\n  this.data.blocks.last(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    if (block == null) {\n      return callback(null, null);\n    }\n\n    var requests = [];\n    var blockHash = to.hex(block.hash());\n\n    block.transactions.forEach(function(tx) {\n      var txHash = to.hex(tx.hash());\n\n      requests.push(\n        self.data.transactions.del.bind(self.data.transactions, txHash),\n        self.data.transactionReceipts.del.bind(self.data.transactionReceipts, txHash)\n      );\n    });\n\n    requests.push(\n      self.data.blockLogs.pop.bind(self.data.blockLogs),\n      self.data.blockHashes.del.bind(self.data.blockHashes, blockHash),\n      self.data.blocks.pop.bind(self.data.blocks) // Do this one last in case anything relies on it.\n    );\n\n    async.series(requests, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Set the root to the last available, which will \"roll back\" to the previous\n      // moment in time. Note that all the old data is still in the db, but it's now just junk data.\n      self.data.blocks.last(function(err, newLastBlock) {\n        if (err) {\n          return callback(err);\n        }\n        // using setStateRoot because in the future it will automatically take care\n        // of clearing the cache for us.\n        // note setStateRoot checks for checkpoints, and if there are any, it will fail.\n        // At time of writing this comment, the only time there could be a checkpoint\n        // is in the middle of a vm.runBlock call. Once asyncRequestProcessing is reenabled\n        // this will likely cause problems.\n        self.vm.stateManager.setStateRoot(newLastBlock.header.stateRoot, function(err) {\n          // remove this `._storageTries = {}` statement once https://github.com/ethereumjs/ethereumjs-vm/pull/445\n          // is in a release, probably in ejs-vm 2.6.1\n          if (!err) {\n            self.vm.stateManager._storageTries = {};\n          }\n          // Remember: Return block we popped off.\n          callback(err, block);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.clearPendingTransactions = function() {\n  this.pending_transactions = [];\n};\n\n/**\n * createBlock\n *\n * Create a new block, where the parent's block is either the latest block\n * on the chain or the parent block passed in.\n *\n * @param  {Block}   parent   The block meant to be the parent block (optional)\n * @param  {Function} callback Callback function called after block is created\n * @return Block              The block created.\n */\nBlockchainDouble.prototype.createBlock = function(parent, emulateParent, callback) {\n  var self = this;\n\n  if (typeof parent === \"function\") {\n    callback = parent;\n    parent = null;\n    emulateParent = false;\n  } else if (typeof emulateParent === \"function\") {\n    callback = emulateParent;\n    emulateParent = false;\n  }\n\n  var block = new Block();\n\n  function getParent(callback) {\n    if (parent) {\n      return callback(null, parent);\n    } else {\n      self.latestBlock(callback);\n    }\n  }\n\n  getParent(function(err, parent) {\n    if (err) {\n      return callback(err);\n    }\n\n    block.header.gasLimit = self.blockGasLimit;\n\n    if (parent != null && emulateParent) {\n      block.header.number = parent.header.number;\n      block.header.timestamp = parent.header.timestamp;\n      block.header.parentHash = parent.header.parentHash;\n    } else {\n      var parentNumber = parent != null ? to.number(parent.header.number) : -1;\n\n      // Ensure we have the right block number for the VM.\n      block.header.number = to.hex(parentNumber + 1);\n\n      // Set the timestamp before processing txs\n      block.header.timestamp = to.hex(self.currentTime());\n\n      if (parent != null) {\n        block.header.parentHash = to.hex(parent.hash());\n      }\n    }\n\n    callback(null, block);\n  });\n};\n\nBlockchainDouble.prototype.getQueuedNonce = function(address, callback) {\n  var nonce = null;\n  var addressBuffer = to.buffer(address);\n  this.pending_transactions.forEach(function(tx) {\n    if (!tx.from.equals(addressBuffer)) {\n      return;\n    }\n\n    var pendingNonce = new BN(tx.nonce);\n    // If this is the first queued nonce for this address we found,\n    // or it's higher than the previous highest, note it.\n    if (nonce === null || pendingNonce.gt(nonce)) {\n      nonce = pendingNonce;\n    }\n  });\n\n  // If we found a queued transaction nonce, return one higher\n  // than the highest we found\n  if (nonce != null) {\n    return callback(null, nonce.iaddn(1).toArrayLike(Buffer));\n  }\n  this.stateTrie.get(addressBuffer, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n\n    var account = new Account(val);\n    // nonces are initiallized as an empty buffer, which isn't what we want.\n    callback(null, account.nonce.length === 0 ? Buffer.from([0]) : account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.queueTransaction = function(tx) {\n  this.pending_transactions.push(tx);\n};\n\nBlockchainDouble.prototype.sortByPriceAndNonce = function() {\n  // Sorts transactions like I believe geth does.\n  // See the description of 'SortByPriceAndNonce' at\n  // https://github.com/ethereum/go-ethereum/blob/290e851f57f5d27a1d5f0f7ad784c836e017c337/core/types/transaction.go\n  var self = this;\n  var sortedByNonce = {};\n\n  self.pending_transactions.forEach((tx) => {\n    const from = tx.from.toString(\"hex\");\n    const arr = sortedByNonce[from];\n    if (arr) {\n      arr.push(tx);\n    } else {\n      sortedByNonce[from] = [tx];\n    }\n  });\n\n  var priceSort = function(a, b) {\n    return parseInt(to.hex(b.gasPrice), 16) - parseInt(to.hex(a.gasPrice), 16);\n  };\n  var nonceSort = function(a, b) {\n    return parseInt(to.hex(a.nonce), 16) - parseInt(to.hex(b.nonce), 16);\n  };\n\n  // Now sort each address by nonce\n  Object.keys(sortedByNonce).forEach((address) => {\n    sortedByNonce[address].sort(nonceSort);\n  });\n\n  // Initialise a heap, sorted by price, for the head transaction from each account.\n  var heap = new Heap(priceSort);\n  Object.keys(sortedByNonce).forEach((address) => {\n    heap.push(sortedByNonce[address].shift());\n  });\n\n  // Now reorder our transactions. Compare the next transactions from each account, and choose\n  // the one with the highest gas price.\n  const sortedTransactions = [];\n  while (heap.size() > 0) {\n    const best = heap.pop();\n    let address = best.from.toString(\"hex\");\n    if (sortedByNonce[address].length > 0) {\n      // Push on the next transaction from this account\n      heap.push(sortedByNonce[address].shift());\n    }\n    sortedTransactions.push(best);\n  }\n  self.pending_transactions = sortedTransactions;\n};\n\nBlockchainDouble.prototype.getReadyCall = function(tx, emulateParent, blockNumber, callback) {\n  const readyCall = (tx, err, parentBlock) => {\n    if (err) {\n      return callback(err);\n    }\n    // create a fake block with this fake transaction\n    this.createBlock(parentBlock, emulateParent, (err, newBlock) => {\n      if (err) {\n        return callback(err);\n      }\n\n      newBlock.transactions.push(tx);\n\n      // gas estimates and eth_calls aren't subject to block gas limits\n      newBlock.header.gasLimit = tx.gasLimit;\n\n      const runArgs = {\n        tx: tx,\n        block: newBlock,\n        skipBalance: true,\n        skipNonce: true\n      };\n\n      callback(null, parentBlock.header.stateRoot, runArgs);\n    });\n  };\n  // Delegate block selection\n  if (blockNumber === \"latest\") {\n    this.latestBlock(readyCall.bind(null, tx));\n  } else {\n    this.getBlock(blockNumber, readyCall.bind(null, tx));\n  }\n};\n\nBlockchainDouble.prototype.readyCall = function(tx, emulateParent, blockNumber, callback) {\n  this.getReadyCall(tx, emulateParent, blockNumber, (err, stateRoot, runArgs) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    const stateTrie = this.createStateTrie(this.data.trie_db, stateRoot);\n    const vm = this.createVMFromStateTrie(stateTrie);\n    callback(null, vm, runArgs);\n  });\n};\n\nBlockchainDouble.prototype.processCall = function(tx, blockNumber, callback) {\n  this.readyCall(tx, true, blockNumber, async(err, vm, runArgs) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    const result = await vm.runTx(runArgs).catch((vmerr) => ({ vmerr }));\n    let vmerr = result.vmerr;\n    // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n    if (vmerr && vmerr instanceof Error === false) {\n      vmerr = new Error(\"VM error: \" + vmerr);\n    }\n\n    // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n    if (vmerr) {\n      return callback(vmerr, err);\n    }\n\n    // If no error, check for a runtime error. This can return null if no runtime error.\n    vmerr = RuntimeError.fromResults([tx], { results: [result] });\n\n    callback(vmerr, result);\n  });\n};\n\nBlockchainDouble.prototype.estimateGas = function(tx, blockNumber, callback) {\n  this.getReadyCall(tx, false, blockNumber, (err, stateRoot, runArgs) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    const generateVM = () => {\n      const stateTrie = this.createStateTrie(this.data.trie_db, stateRoot);\n      return this.createVMFromStateTrie(stateTrie);\n    };\n    estimateGas(generateVM, runArgs, callback);\n  });\n};\n\n/**\n * processBlock\n *\n * Process the passed in block and included transactions\n *\n * @param  {VM} vm             the vm to use when running the block\n * @param  {Block} block       block to process\n * @param  {Boolean} commit    Whether or not changes should be committed to the state\n * trie and the block appended to the end of the chain.\n * @param  {Function} callback Callback function when transaction processing is completed.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processBlock = async function(vm, block, commit, callback) {\n  var self = this;\n\n  if (typeof commit === \"function\") {\n    callback = commit;\n    commit = true;\n  }\n\n  const results = await vm\n    .runBlock({\n      block: block,\n      generate: true,\n      skipBlockValidation: true\n    })\n    .catch((vmerr) => ({ vmerr }));\n  let vmerr = results.vmerr;\n  // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n  if (vmerr && vmerr instanceof Error === false) {\n    vmerr = new Error(\"VM error: \" + vmerr);\n  }\n\n  // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n  if (vmerr) {\n    callback(vmerr);\n    return;\n  }\n  // If no error, check for a runtime error. This can return null if no runtime error.\n  vmerr = RuntimeError.fromResults(block.transactions, results);\n\n  // Note, even if we have an error, some transactions may still have succeeded.\n  // Process their logs if so, returning the error at the end.\n\n  var logs = [];\n  var receipts = [];\n\n  var totalBlockGasUsage = 0;\n\n  results.results.forEach(function(result) {\n    totalBlockGasUsage += to.number(result.gasUsed);\n  });\n\n  block.header.gasUsed = utils.toBuffer(to.hex(totalBlockGasUsage));\n\n  const txTrie = new Trie();\n  const rcptTrie = new Trie();\n  const promises = [];\n  const putInTrie = (trie, key, val) => promisify(trie.put.bind(trie))(key, val);\n\n  for (var v = 0; v < results.receipts.length; v++) {\n    var result = results.results[v];\n    var receipt = results.receipts[v];\n    var tx = block.transactions[v];\n    var txHash = tx.hash();\n    var txLogs = [];\n\n    // Only process the transaction's logs if it didn't error.\n    if (result.execResult.exceptionError === undefined) {\n      for (var i = 0; i < receipt.logs.length; i++) {\n        var receiptLog = receipt.logs[i];\n        var address = to.hex(receiptLog[0]);\n        var topics = [];\n\n        for (var j = 0; j < receiptLog[1].length; j++) {\n          topics.push(to.hex(receiptLog[1][j]));\n        }\n\n        var data = to.hex(receiptLog[2]);\n\n        var log = new Log({\n          logIndex: to.hex(i),\n          transactionIndex: to.hex(v),\n          transactionHash: txHash,\n          block: block,\n          address: address,\n          data: data,\n          topics: topics,\n          type: \"mined\"\n        });\n\n        logs.push(log);\n        txLogs.push(log);\n      }\n    }\n\n    let rcpt = new Receipt(\n      tx,\n      block,\n      txLogs,\n      result.gasUsed.toArrayLike(Buffer),\n      receipt.gasUsed,\n      result.createdAddress,\n      receipt.status,\n      to.hex(receipt.bitvector)\n    );\n    receipts.push(rcpt);\n\n    const rawReceipt = [receipt.status, receipt.gasUsed, receipt.bitvector, receipt.logs];\n    const rcptBuffer = utils.rlp.encode(rawReceipt);\n    const key = utils.rlp.encode(v);\n    promises.push(putInTrie(txTrie, key, tx.serialize()));\n    promises.push(putInTrie(rcptTrie, key, rcptBuffer));\n  }\n  await Promise.all(promises);\n\n  block.header.transactionsTrie = utils.toBuffer(txTrie.root);\n  block.header.receiptTrie = utils.toBuffer(rcptTrie.root);\n\n  if (commit) {\n    // Put that block on the end of the chain\n    self.putBlock(block, logs, receipts, done);\n  } else {\n    done();\n  }\n\n  function done(e) {\n    if (e) {\n      return callback(e);\n    }\n    // Note we return the vm err here too, if it exists.\n    callback(vmerr, block.transactions, results);\n  }\n};\n\n/**\n * processNextBlock\n *\n * Process the next block like a normal blockchain, pulling from the list of\n * pending transactions.\n *\n * @param  {number} timestamp at which the block is mined\n * @param  {Function} callback Callback when transaction processing is finished.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processNextBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n\n  self.sortByPriceAndNonce();\n\n  // Grab only the transactions that can fit within the block\n  var currentTransactions = [];\n  var totalGasLimit = 0;\n  var maxGasLimit = to.number(self.blockGasLimit);\n\n  while (self.pending_transactions.length > 0) {\n    var tx = self.pending_transactions[0];\n    var gasLimit = to.number(tx.gasLimit);\n\n    if (totalGasLimit + gasLimit <= maxGasLimit) {\n      totalGasLimit += gasLimit;\n      self.pending_transactions.shift();\n      currentTransactions.push(tx);\n    } else {\n      // Next one won't fit. Break.\n      break;\n    }\n  }\n\n  // Remember, we ensured transactions had a valid gas limit when they were queued (in the state manager).\n  // If we run into a case where we can't process any because one is higher than the gas limit,\n  // then it's a serious issue. This should never happen, but let's check anyway.\n  if (currentTransactions.length === 0 && self.pending_transactions.length > 0) {\n    // Error like geth.\n    var error = \"Unexpected error condition: next transaction exceeds block gas limit\";\n    return callback(error);\n  }\n\n  // Create a new block meant to be the end of the chain\n  this.createBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    // Overwrite block timestamp\n    if (timestamp) {\n      self.data.blocks.last(function(err, last) {\n        if (err) {\n          // it is safe to ignore this error as we only use the result\n          // to log a warning to the console.\n          return;\n        }\n        if (last && to.number(last.header.timestamp) > timestamp) {\n          self.logger.log(\n            \"Waring: Setting the block timestamp (\" + timestamp + \") that is earlier than the parent block one.\"\n          );\n        }\n      });\n      block.header.timestamp = to.hex(timestamp);\n      self.setTime(new Date(timestamp * 1000));\n    }\n    // Add transactions to the block.\n    Array.prototype.push.apply(block.transactions, currentTransactions);\n\n    self.processBlock(self.vm, block, true, callback);\n  });\n};\n\n/**\n * processTransactionTrace\n *\n * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n * This will return the vm-level trace output for debugging purposes.\n *\n * Strategy:\n *\n *  1. Find block where transaction occurred\n *  2. Set state root of that block\n *  3. Rerun every transaction in that block prior to and including the requested transaction\n *  4. Send trace results back.\n *\n * @param  {[type]}   tx       [description]\n * @param  {Function} callback [description]\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processTransactionTrace = async function(hash, params, callback) {\n  const self = this;\n  const targetHash = to.hex(hash);\n  let txHashCurrentlyProcessing = \"\";\n  let txCurrentlyProcessing = null;\n  let vm;\n\n  let storageStack = {\n    currentDepth: -1,\n    stack: []\n  };\n\n  let returnVal = {\n    gas: 0,\n    returnValue: \"\",\n    structLogs: []\n  };\n\n  function stepListener(event, next) {\n    // See these docs:\n    // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n\n    const gasLeft = to.number(event.gasLeft);\n    const totalGasUsedAfterThisStep = to.number(txCurrentlyProcessing.gasLimit) - gasLeft;\n    const gasUsedThisStep = totalGasUsedAfterThisStep - returnVal.gas;\n    returnVal.gas += gasUsedThisStep;\n\n    let memory = null;\n    if (!params.disableMemory) {\n      // Get memory and break it up into 32-byte words.\n      // Note we may possibly have to pad the final word.\n      memory = Buffer.from(event.memory).toString(\"hex\");\n      memory = memory.match(/.{1,64}/g) || [];\n\n      if (memory.length > 0) {\n        const lastItem = memory[memory.length - 1];\n        if (lastItem.length < 64) {\n          memory[memory.length - 1] = lastItem + new Array(64 - lastItem.length + 1).join(\"0\");\n        }\n      }\n    }\n\n    let stack = null;\n    if (!params.disableStack) {\n      stack = event.stack.map((item) => {\n        return to.rpcDataHexString(item, 64).replace(\"0x\", \"\"); // non-0x prefixed.\n      });\n    }\n\n    let structLog = {\n      depth: event.depth,\n      error: \"\",\n      gas: gasLeft,\n      gasCost: gasUsedThisStep,\n      memory,\n      op: event.opcode.name,\n      pc: event.pc,\n      stack,\n      storage: null\n    };\n\n    if (params.disableStorage) {\n      returnVal.structLogs.push(structLog);\n      next();\n    } else {\n      structLog = self.processStorageTrace(structLog, storageStack, event, vm, function(err, structLog) {\n        if (err) {\n          return next(err);\n        }\n        returnVal.structLogs.push(structLog);\n        next();\n      });\n    }\n  }\n\n  // #1 - get block via transaction receipt\n  this.getTransactionReceipt(targetHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!receipt) {\n      return callback(new Error(\"Unknown transaction \" + targetHash));\n    }\n\n    let targetBlock = receipt.block;\n\n    // Get the parent of the target block\n    self.getBlock(targetBlock.header.parentHash, function(err, parent) {\n      if (err) {\n        return callback(err);\n      }\n\n      // #2 - Set state root of original block\n      var stateTrie = self.createStateTrie(self.data.trie_db, parent.header.stateRoot, {\n        // when forking we need to make sure we also copy over the forkBlockNumber,\n        // otherwise some operations will request data from the main chain at the\n        // latest block\n        forkBlockNumber: to.number(parent.header.number)\n      });\n      vm = self.createVMFromStateTrie(stateTrie);\n\n      // Prepare the \"next\" block with necessary transactions\n      self.createBlock(parent, false, function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        // make sure we use the same timestamp as the target block\n        block.header.timestamp = targetBlock.header.timestamp;\n\n        for (var i = 0; i < targetBlock.transactions.length; i++) {\n          var tx = targetBlock.transactions[i];\n          block.transactions.push(tx);\n\n          // After including the target transaction, that's all we need to do.\n          if (to.hex(tx.hash()) === targetHash) {\n            break;\n          }\n        }\n\n        function beforeTxListener(tx) {\n          txCurrentlyProcessing = tx;\n          txHashCurrentlyProcessing = to.hex(tx.hash());\n          if (txHashCurrentlyProcessing === targetHash) {\n            vm.on(\"step\", stepListener);\n          }\n        }\n\n        // afterTxListener cleans up everything.\n        function afterTxListener() {\n          if (txHashCurrentlyProcessing === targetHash) {\n            removeListeners();\n          }\n        }\n\n        function removeListeners() {\n          vm.removeListener(\"step\", stepListener);\n          vm.removeListener(\"beforeTx\", beforeTxListener);\n          vm.removeListener(\"afterTx\", afterTxListener);\n        }\n\n        // Listen to beforeTx and afterTx so we know when our target transaction\n        // is processing. These events will add the event listener for getting the trace data.\n        vm.on(\"beforeTx\", beforeTxListener);\n        vm.on(\"afterTx\", afterTxListener);\n\n        // Don't even let the vm try to flush the block's _cache to the stateTrie.\n        // When forking some of the data that the traced function may request will\n        // exist only on the main chain. Because we pretty much lie to the VM by\n        // telling it we DO have data in our Trie, when we really don't, it gets\n        // lost during the commit phase when it traverses the \"borrowed\" data's\n        // trie (as it may not have a valid root). Because this is a trace, and we\n        // don't need to commit the data, duck punching the `flush` method (the\n        // simplest method I could find) is fine.\n        // Remove this and you may see the infamous\n        // `Uncaught TypeError: Cannot read property 'pop' of undefined` error!\n        vm.stateManager._cache.flush = (cb) => cb();\n\n        // #3 - Process the block without committing the data.\n        self.processBlock(vm, block, false, function(err) {\n          // Ignore runtime errors, or else erroneous transactions can't be traced.\n          if (err && err.message.indexOf(\"VM Exception\") === 0) {\n            err = null;\n          }\n\n          // Just to be safe\n          removeListeners();\n\n          // #4 - send state results back\n          callback(err, returnVal);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.processStorageTrace = function(structLog, storageStack, event, vm, callback) {\n  var name = event.opcode.name;\n\n  if (storageStack.currentDepth > event.depth) {\n    storageStack.stack.pop();\n  }\n  if (storageStack.currentDepth < event.depth) {\n    storageStack.stack.push({});\n  }\n\n  storageStack.currentDepth = event.depth;\n\n  var key;\n  var value;\n  switch (name) {\n    case \"SSTORE\":\n      {\n        const stack = event.stack;\n        const stackLength = stack.length;\n        key = to.rpcDataHexString(stack[stackLength - 1], 64).replace(\"0x\", \"\");\n        value = to.rpcDataHexString(stack[stackLength - 2], 64).replace(\"0x\", \"\");\n        // use Object.assign to prevent future steps from overwriting this step's storage values\n        structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n\n        callback(null, structLog);\n        // assign after callback because this storage change actually takes\n        // effect _after_ this opcode executes\n        storageStack.stack[storageStack.currentDepth][key] = value;\n      }\n      break;\n    case \"SLOAD\":\n      {\n        const stack = event.stack;\n        // this one's more fun, we need to get the value the contract is loading from current storage\n        key = to.rpcDataHexString(stack[stack.length - 1], 64).replace(\"0x\", \"\");\n\n        vm.stateManager.getContractStorage(event.address, Buffer.from(key, \"hex\"), function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          value = to.rpcDataHexString(result, 64).replace(\"0x\", \"\");\n          storageStack.stack[storageStack.currentDepth][key] = value;\n          // use Object.assign to prevent future steps from overwriting this step's storage values\n          structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n          callback(null, structLog);\n        });\n      }\n      break;\n    default:\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n      callback(null, structLog);\n  }\n};\n\nBlockchainDouble.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      // Finally, put the stateRoot back for good\n      trie.root = currentStateRoot;\n\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      callback(null, account);\n    });\n  });\n};\n\nBlockchainDouble.prototype.getNonce = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.getBalance = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, account.balance);\n  });\n};\n\n// Note! Storage values are returned RLP encoded!\nBlockchainDouble.prototype.getStorage = function(address, position, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      trie.root = account.stateRoot;\n\n      trie.get(utils.setLengthLeft(utils.toBuffer(position), 32), function(err, value) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err != null) {\n          return callback(err);\n        }\n\n        callback(null, value);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      account.getCode(trie, function(err, code) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, code);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getTransaction = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.data.transactions.get(hash, function(err, tx) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, tx);\n  });\n};\n\nBlockchainDouble.prototype.getTransactionReceipt = function(hash, callback) {\n  hash = to.hex(hash);\n  const pendingTxs = this.pending_transactions;\n\n  for (var i = 0; i < pendingTxs.length; i++) {\n    let pendingTxHash = to.hex(pendingTxs[i].hash());\n    if (hash === pendingTxHash) {\n      return callback(null, { tx: pendingTxs[i] });\n    }\n  }\n\n  this.data.transactionReceipts.get(hash, function(err, receipt) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(err, receipt);\n  });\n};\n\nBlockchainDouble.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    self.data.blockLogs.get(effective, callback);\n  });\n};\n\nBlockchainDouble.prototype.getHeight = function(callback) {\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, length - 1);\n  });\n};\n\nBlockchainDouble.prototype.currentTime = function() {\n  return ((new Date().getTime() / 1000) | 0) + this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.increaseTime = function(seconds) {\n  if (seconds < 0) {\n    seconds = 0;\n  }\n  this.timeAdjustment += seconds;\n  return this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.setTime = function(date) {\n  var now = (new Date().getTime() / 1000) | 0;\n  var start = (date.getTime() / 1000) | 0;\n  this.timeAdjustment = start - now;\n};\n\nBlockchainDouble.prototype.close = function(callback) {\n  this.data.close(callback);\n};\n\nmodule.exports = BlockchainDouble;\n","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"fs\");","// var to = require(\"../utils/to\");\nvar Transaction = require(\"../utils/transaction\");\nvar Common = require(\"ethereumjs-common\").default;\nvar ethUtil = require(\"ethereumjs-util\");\n\nconst decode = function(json, done) {\n  const options = {\n    hash: json.hash,\n    nonce: json.nonce,\n    value: json.value,\n    to: json.to,\n    from: json.from,\n    gasLimit: json.gas || json.gasLimit,\n    gasPrice: json.gasPrice,\n    data: json.data,\n    v: json.v,\n    r: json.r,\n    s: json.s\n  };\n\n  const sigV = ethUtil.bufferToInt(options.v);\n  let chainId = Math.floor((sigV - 35) / 2);\n  if (chainId < 0) {\n    chainId = 0;\n  }\n\n  const commonOptions = {\n    name: \"ganache\",\n    chainId,\n    networkId: 1,\n    comment: \"Local test network\"\n  };\n\n  let hardfork = \"istanbul\";\n  if (json._options) {\n    hardfork = json._options.hardfork;\n    commonOptions.chainId = json._options.chainId;\n    commonOptions.networkId = json._options.networkId;\n  }\n\n  const common = Common.forCustomChain(\n    \"mainnet\", // TODO needs to match chain id\n    commonOptions,\n    hardfork\n  );\n  // databases generated before ganache-core@2.3.2 didn't have a `_type` and\n  // and were always fake signed. So if _type is undefined it is \"fake\" (even\n  // if we have a valid signature that can generate the tx's `from`).\n  const type = json._type === undefined ? Transaction.types.fake : json._type;\n  const tx = Transaction.fromJSON(options, type, common);\n\n  // Commenting this out because we don't want to throw if the json.hash we\n  // put in is different that the tx.hash() calculation we now have. There\n  // may have been bug fixes to the way transactions are hashed in future\n  // versions of ganache-core, but we still want tobe able to read in\n  // transactions from previously saved databases!\n  // if (to.hex(tx.hash()) !== json.hash) {\n  //   const e = new Error(\n  //     \"DB consistency check: Decoded transaction hash \" +\n  //       \"didn't match encoded hash. Expected: \" +\n  //       json.hash +\n  //       \"; actual: \" +\n  //       to.hex(tx.hash())\n  //   );\n  //   return done(e);\n  // }\n\n  done(null, tx);\n};\n\nconst encode = function(tx, done) {\n  const encoded = tx.encode();\n  done(null, encoded);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n","module.exports = require(\"web3-core-helpers\");","module.exports = require(\"web3-core-method\");","module.exports = require(\"web3-net\");","module.exports = require(\"web3-eth-personal\");","var inherits = require(\"util\").inherits;\n\n// raised when the transaction is rejected prior to running it in the EVM.\nfunction TXRejectedError(message) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n}\n\ninherits(TXRejectedError, Error);\n\nmodule.exports = TXRejectedError;\n","var to = require(\"./to\");\n\nmodule.exports = {\n  toJSON: function(block, includeFullTransactions) {\n    return {\n      number: to.rpcQuantityHexString(block.header.number),\n      hash: to.hex(block.hash()),\n      parentHash: to.hex(block.header.parentHash), // common.hash\n      mixHash: to.hex(block.header.mixHash),\n      nonce: to.rpcDataHexString(to.hex(block.header.nonce), 16),\n      sha3Uncles: to.hex(block.header.uncleHash),\n      logsBloom: to.hex(block.header.bloom),\n      transactionsRoot: to.hex(block.header.transactionsTrie),\n      stateRoot: to.hex(block.header.stateRoot),\n      receiptsRoot: to.hex(block.header.receiptTrie),\n      miner: to.hex(block.header.coinbase),\n      difficulty: to.rpcQuantityHexString(block.header.difficulty),\n      totalDifficulty: to.rpcQuantityHexString(block.header.difficulty), // TODO: Figure out what to do here.\n      extraData: to.rpcDataHexString(block.header.extraData),\n      size: to.hex(1000), // TODO: Do something better here\n      gasLimit: to.rpcQuantityHexString(block.header.gasLimit),\n      gasUsed: to.rpcQuantityHexString(block.header.gasUsed),\n      timestamp: to.rpcQuantityHexString(block.header.timestamp),\n      transactions: block.transactions.map(function(tx) {\n        if (includeFullTransactions) {\n          return tx.toJsonRpc(block);\n        } else {\n          return to.hex(tx.hash());\n        }\n      }),\n      uncles: [] // block.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n    };\n  }\n};\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst Provider = require(\"./lib/provider\");\nconst Server = require(\"./lib/server\");\n\n// This interface exists so as not to cause breaking changes.\nmodule.exports = {\n  server: function(options) {\n    return Server.create(options);\n  },\n  provider: function(options) {\n    return new Provider(options);\n  },\n  _webpacked: true\n};\n","module.exports = require(\"web3-provider-engine\");","module.exports = require(\"web3-provider-engine/subproviders/subscriptions\");","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(RequestFunnel, Subprovider);\n\nmodule.exports = RequestFunnel;\n\n// See if any payloads for the specified methods are marked as external.\n// If they are external, and match the method list, process them one at\n// a time.\nfunction RequestFunnel() {\n  // We use an object here for O(1) lookups (speed).\n  this.methods = {\n    eth_call: true,\n    eth_getStorageAt: true,\n    eth_sendTransaction: true,\n    eth_sendRawTransaction: true,\n\n    // Ensure block filter and filter changes are process one at a time\n    // as well so filter requests that come in after a transaction get\n    // processed once that transaction has finished processing.\n    eth_newBlockFilter: true,\n    eth_getFilterChanges: true,\n    eth_getFilterLogs: true\n  };\n  this.queue = [];\n  this.isWorking = false;\n}\n\nRequestFunnel.prototype.handleRequest = function(payload, next, end) {\n  if (payload.external !== true || this.methods[payload.method] !== true) {\n    return next();\n  }\n\n  this.queue.push([payload, next]);\n\n  if (this.isWorking === false) {\n    this.processNext();\n  }\n};\n\nRequestFunnel.prototype.processNext = function() {\n  var self = this;\n\n  if (this.queue.length === 0) {\n    this.isWorking = false;\n    return;\n  }\n\n  this.isWorking = true;\n\n  var item = this.queue.shift();\n  var next = item[1];\n\n  next(function(error, request, cb) {\n    if (error) {\n      return cb(error);\n    }\n    cb();\n    self.processNext();\n  });\n};\n","// It's unforutnate we have to have this subprovider, but it's because\n// we instamine, and web3 isn't written in a way that supports instamining\n// (i.e., it sets up the filter after the transaction has been processed).\n// This block filter will ensure that each block filter will always see\n// the change from the last block to the current block.\n//\n// Note: An added benefit of this is that it shaves off a signifcant\n// amount of time from tests that use web3 and block filters.\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\nvar async = require(\"async\");\nvar to = require(\"../utils/to\");\n\ninherits(DelayedBlockFilter, Subprovider);\n\nmodule.exports = DelayedBlockFilter;\n\nfunction DelayedBlockFilter() {\n  this.watching = {};\n}\n\nDelayedBlockFilter.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method === \"eth_newBlockFilter\") {\n    return this.handleNewBlockFilter(payload, next, end);\n  }\n  if (payload.method === \"eth_getFilterChanges\") {\n    return this.handleGetFilterChanges(payload, next, end);\n  }\n\n  next();\n};\n\nDelayedBlockFilter.prototype.handleNewBlockFilter = function(payload, next, end) {\n  var self = this;\n\n  // Let this filter process and add it to our watch list.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n    self.watching[result] = true;\n    cb();\n  });\n};\n\nDelayedBlockFilter.prototype.handleGetFilterChanges = function(payload, next, end) {\n  var self = this;\n  var filterId = payload.params[0];\n\n  if (!this.watching[filterId]) {\n    return next();\n  }\n\n  // Get the changes, and then alter the result.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n\n    var currentBlockHash;\n    var previousBlockHash;\n    var blockNumber;\n\n    async.series(\n      [\n        function(c) {\n          // If we have a result, use it.\n          if (result.length !== 0) {\n            currentBlockHash = result[0];\n            c();\n          } else {\n            // Otherwise, get the current block number.\n            self.emitPayload(\n              {\n                method: \"eth_blockNumber\"\n              },\n              function(err, res) {\n                if (err) {\n                  return c(err);\n                }\n                blockNumber = to.number(res.result);\n                c();\n              }\n            );\n          }\n        },\n        function(c) {\n          // If we got a block number above, meaning, we didn't get a block hash,\n          // skip this step.\n          if (blockNumber) {\n            return c();\n          }\n\n          // If not skipped, then we got a block hash, and we need to get a block number from it.\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByHash\",\n              params: [currentBlockHash, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              blockNumber = to.number(res.result.number);\n              c();\n            }\n          );\n        },\n        function(c) {\n          // If we're at block 0, return no changes. See final function below.\n          blockNumber = to.number(blockNumber);\n          if (blockNumber === 0) {\n            previousBlockHash = undefined;\n            return c();\n          }\n\n          // If at this point, we do have a block number, so let's subtract one\n          // from it and get the block hash of the block before it.\n          blockNumber = blockNumber - 1;\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByNumber\",\n              params: [blockNumber, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              previousBlockHash = res.result.hash;\n              c();\n            }\n          );\n        }\n      ],\n      function(err) {\n        if (err) {\n          // Unfortunately the subprovider code doesn't let us return an error\n          // through the callback cb(). So we'll just ignore it.... (famous last words).\n        }\n\n        // If we got the previous block, use it. Otherwise do nothing.\n        // Then stop watching because we only want on getFilterChanges to react this way.\n        if (previousBlockHash) {\n          result[0] = previousBlockHash;\n        }\n\n        delete self.watching[filterId];\n        cb();\n      }\n    );\n  });\n};\n","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(GethDefaults, Subprovider);\n\nmodule.exports = GethDefaults;\n\nfunction GethDefaults() {}\n\n// Massage eth_estimateGas requests, setting default data (e.g., from) if\n// not specified. This is here specifically to make the testrpc\n// react like Geth.\nGethDefaults.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method !== \"eth_estimateGas\" && payload.method !== \"eth_call\") {\n    return next();\n  }\n\n  var params = payload.params[0];\n\n  if (params.from == null) {\n    this.emitPayload(\n      {\n        method: \"eth_coinbase\"\n      },\n      function(err, result) {\n        if (err) {\n          return end(err);\n        }\n\n        var coinbase = result.result;\n\n        params.from = coinbase;\n        next();\n      }\n    );\n  } else {\n    next();\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar StateManager = require(\"../statemanager.js\");\nvar to = require(\"../utils/to\");\nvar TXRejectedError = require(\"../utils/txrejectederror\");\n\nvar blockHelper = require(\"../utils/block_helper\");\nvar pkg = require(\"../../package.json\");\nconst { BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\n\nconst maxSafeInt = \"0x\" + Number.MAX_SAFE_INTEGER.toString(16);\n\ninherits(GethApiDouble, Subprovider);\n\nfunction GethApiDouble(options, provider) {\n  var self = this;\n\n  this.state = options.state || new StateManager(options, provider);\n  this.options = options;\n  this.initialized = false;\n\n  this.initialization_error = null;\n  this.post_initialization_callbacks = [];\n\n  this.state.initialize(function(err) {\n    if (err) {\n      self.initialization_error = err;\n    }\n    self.initialized = true;\n\n    var callbacks = self.post_initialization_callbacks;\n    self.post_initialization_callbacks = [];\n\n    callbacks.forEach(function(callback) {\n      setImmediate(function() {\n        callback(self.initialization_error, self.state);\n      });\n    });\n  });\n}\n\nGethApiDouble.prototype.waitForInitialization = function(callback) {\n  var self = this;\n  if (self.initialized === false) {\n    self.post_initialization_callbacks.push(callback);\n  } else {\n    callback(self.initialization_error, self.state);\n  }\n};\n\n// Function to not pass methods through until initialization is finished\nGethApiDouble.prototype.handleRequest = function(payload, next, end) {\n  var self = this;\n\n  if (self.initialization_error != null) {\n    return end(self.initialization_error);\n  }\n\n  if (self.initialized === false) {\n    self.waitForInitialization(self.getDelayedHandler(payload, next, end));\n    return;\n  }\n\n  var method = self[payload.method];\n\n  if (method == null) {\n    return end(new Error(\"Method \" + payload.method + \" not supported.\"));\n  }\n\n  var params = payload.params || [];\n  var args = [].concat(params);\n\n  var addedBlockParam = false;\n\n  if (self.requiresDefaultBlockParameter(payload.method) && args.length < method.length - 1) {\n    args.push(\"latest\");\n    addedBlockParam = true;\n  }\n\n  args.push(end);\n\n  // avoid crash by checking to make sure that we haven't specified too many arguments\n  if (\n    args.length > method.length ||\n    (method.minLength !== undefined && args.length < method.minLength) ||\n    (method.minLength === undefined && args.length < method.length)\n  ) {\n    var errorMessage = `Incorrect number of arguments. Method '${payload.method}' requires `;\n    if (method.minLength) {\n      errorMessage += `between ${method.minLength - 1} and ${method.length - 1} arguments. `;\n    } else {\n      errorMessage += `exactly ${method.length - 1} arguments. `;\n    }\n\n    if (addedBlockParam) {\n      errorMessage += \"Including the implicit block argument, r\";\n    } else {\n      // new sentence, capitalize it.\n      errorMessage += \"R\";\n    }\n    errorMessage += `equest specified ${args.length - 1} arguments: ${JSON.stringify(args)}.`;\n\n    return end(new Error(errorMessage));\n  }\n\n  method.apply(self, args);\n};\n\nGethApiDouble.prototype.getDelayedHandler = function(payload, next, end) {\n  var self = this;\n  return function(err, state) {\n    if (err) {\n      end(err);\n    }\n    self.handleRequest(payload, next, end);\n  };\n};\n\nGethApiDouble.prototype.requiresDefaultBlockParameter = function(method) {\n  // object for O(1) lookup.\n  var methods = {\n    eth_getBalance: true,\n    eth_getCode: true,\n    eth_getTransactionCount: true,\n    eth_getStorageAt: true,\n    eth_call: true,\n    eth_estimateGas: true\n  };\n\n  return methods[method] === true;\n};\n\n// Handle individual requests.\n\nGethApiDouble.prototype.eth_accounts = function(callback) {\n  callback(null, Object.keys(this.state.accounts));\n};\n\nGethApiDouble.prototype.eth_blockNumber = function(callback) {\n  this.state.blockNumber(function(err, result) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.hex(result));\n  });\n};\n\nGethApiDouble.prototype.eth_chainId = function(callback) {\n  callback(null, to.hex(1337));\n};\n\nGethApiDouble.prototype.eth_coinbase = function(callback) {\n  callback(null, this.state.coinbase);\n};\n\nGethApiDouble.prototype.eth_mining = function(callback) {\n  callback(null, this.state.is_mining);\n};\n\nGethApiDouble.prototype.eth_hashrate = function(callback) {\n  callback(null, \"0x0\");\n};\n\nGethApiDouble.prototype.eth_gasPrice = function(callback) {\n  callback(null, utils.addHexPrefix(this.state.gasPrice()));\n};\n\nGethApiDouble.prototype.eth_getBalance = function(address, blockNumber, callback) {\n  this.state.getBalance(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getCode = function(address, blockNumber, callback) {\n  this.state.getCode(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getBlockByNumber = function(blockNumber, includeFullTransactions, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, blockHelper.toJSON(block, includeFullTransactions));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockByHash = function(txHash, includeFullTransactions, callback) {\n  this.eth_getBlockByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByNumber = function(blockNumber, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        // block doesn't exist\n        return callback(null, null);\n      }\n      return callback(err);\n    }\n    callback(null, to.rpcQuantityHexString(block.transactions.length));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByHash = function(blockHash, callback) {\n  this.eth_getBlockTransactionCountByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getTransactionReceipt = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt && receipt.block) {\n      result = receipt.toJSON();\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByHash = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      // if there is no block then the transaction is still pending\n      if (!receipt.block) {\n        // assemble the block object with null values for pending transactions\n        receipt.block = {\n          transactions: [],\n          hash: () => {\n            return null;\n          },\n          header: { number: null }\n        };\n\n        result = receipt.tx.toJsonRpc(receipt.block);\n      } else {\n        result = receipt.tx.toJsonRpc(receipt.block);\n      }\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockHashAndIndex = function(hashOrNumber, index, callback) {\n  index = to.number(index);\n\n  this.state.getBlock(hashOrNumber, function(err, block) {\n    if (err) {\n      // block doesn't exist by that hash\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    if (index >= block.transactions.length) {\n      return callback(new Error(\"Transaction at index \" + to.hex(index) + \" does not exist in block.\"));\n    }\n\n    var tx = block.transactions[index];\n    var result = tx.toJsonRpc(block);\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockNumberAndIndex = function(hashOrNumber, index, callback) {\n  this.eth_getTransactionByBlockHashAndIndex(hashOrNumber, index, callback);\n};\n\nGethApiDouble.prototype.eth_getTransactionCount = function(address, blockNumber, callback) {\n  this.state.getTransactionCount(address, blockNumber, (err, count) => {\n    if (err instanceof BlockOutOfRangeError) {\n      return callback(null, null);\n    }\n    return callback(err, count);\n  });\n};\n\nGethApiDouble.prototype.eth_sign = function(address, dataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.sign(address, dataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_signTypedData = function(address, typedDataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.signTypedData(address, typedDataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_sendTransaction = function(txData, callback) {\n  this.state.queueTransaction(\"eth_sendTransaction\", txData, null, callback);\n};\n\nGethApiDouble.prototype.eth_sendRawTransaction = function(rawTx, callback) {\n  let data;\n  if (rawTx) {\n    data = to.buffer(rawTx);\n  }\n\n  if (data === undefined) {\n    throw new TXRejectedError(\"rawTx must be a string, JSON-encoded Buffer, or Buffer.\");\n  }\n\n  this.state.queueRawTransaction(data, callback);\n};\n\nGethApiDouble.prototype._setCallGasLimit = function(txData) {\n  // if the caller didn't specify a gas limit make sure we set one\n  if (!txData.gas && !txData.gasLimit) {\n    const globalCallGasLimit = this.options.callGasLimit;\n    if (globalCallGasLimit != null) {\n      // if the user configured a global `callGasLimit` use it\n      txData.gas = globalCallGasLimit;\n    } else {\n      // otherwise, set a very high gas limit. We'd use Infinity, or some VM flag to ignore gasLimit checks like\n      // geth does, but the VM doesn't currently support that for `runTx`.\n      // https://github.com/ethereumjs/ethereumjs-vm/blob/4bbb6e394a344717890d618a6be1cf67b8e5b74d/lib/runTx.ts#L71\n      txData.gas = maxSafeInt;\n    }\n  }\n};\nGethApiDouble.prototype.eth_call = function(txData, blockNumber, callback) {\n  this._setCallGasLimit(txData);\n  this.state.queueTransaction(\"eth_call\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_estimateGas = function(txData, blockNumber, callback) {\n  this._setCallGasLimit(txData);\n  this.state.queueTransaction(\"eth_estimateGas\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getStorageAt = function(address, position, blockNumber, callback) {\n  this.state.queueStorage(address, position, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_newBlockFilter = function(callback) {\n  var filterId = utils.addHexPrefix(utils.intToHex(this.state.latestFilterId));\n  this.state.latestFilterId += 1;\n  callback(null, filterId);\n};\n\nGethApiDouble.prototype.eth_getFilterChanges = function(filterId, callback) {\n  var blockHash = this.state\n    .latestBlock()\n    .hash()\n    .toString(\"hex\");\n  // Mine a block after each request to getFilterChanges so block filters work.\n  this.state.mine();\n  callback(null, [blockHash]);\n};\n\nGethApiDouble.prototype.eth_getLogs = function(filter, callback) {\n  this.state.getLogs(filter, callback);\n};\n\nGethApiDouble.prototype.eth_uninstallFilter = function(filterId, callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.eth_protocolVersion = function(callback) {\n  callback(null, \"63\");\n};\n\nGethApiDouble.prototype.bzz_hive = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.bzz_info = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.shh_version = function(callback) {\n  callback(null, \"2\");\n};\n\nGethApiDouble.prototype.eth_getCompilers = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.eth_syncing = function(callback) {\n  callback(null, false);\n};\n\nGethApiDouble.prototype.net_listening = function(callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.net_peerCount = function(callback) {\n  callback(null, 0);\n};\n\nGethApiDouble.prototype.web3_clientVersion = function(callback) {\n  callback(null, \"EthereumJS TestRPC/v\" + pkg.version + \"/ethereum-js\");\n};\n\nGethApiDouble.prototype.web3_sha3 = function(string, callback) {\n  callback(null, to.hex(utils.keccak256(string)));\n};\n\nGethApiDouble.prototype.net_version = function(callback) {\n  // net_version returns a string containing a base 10 integer.\n  callback(null, this.state.net_version + \"\");\n};\n\nGethApiDouble.prototype.miner_start = function(threads, callback) {\n  if (!callback && typeof threads === \"function\") {\n    callback = threads;\n    threads = null;\n  }\n\n  this.state.startMining(function(err) {\n    callback(err, true);\n  });\n};\n\n// indicate that `miner_start` only requires one argument (the callback)\nGethApiDouble.prototype.miner_start.minLength = 1;\n\nGethApiDouble.prototype.miner_stop = function(callback) {\n  this.state.stopMining(function(err) {\n    callback(err, true);\n  });\n};\n\nGethApiDouble.prototype.rpc_modules = function(callback) {\n  // returns the availible api modules and versions\n  callback(null, { eth: \"1.0\", net: \"1.0\", rpc: \"1.0\", web3: \"1.0\", evm: \"1.0\", personal: \"1.0\" });\n};\n\nGethApiDouble.prototype.personal_listAccounts = function(callback) {\n  callback(null, Object.keys(this.state.personal_accounts));\n};\n\nGethApiDouble.prototype.personal_newAccount = function(password, callback) {\n  var account = this.state.createAccount({ generate: true });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_importRawKey = function(rawKey, password, callback) {\n  var account = this.state.createAccount({ secretKey: rawKey });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_lockAccount = function(address, callback) {\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var error = \"Account not found\";\n    return callback(error);\n  }\n  delete this.state.unlocked_accounts[address.toLowerCase()];\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_unlockAccount = function(address, password, duration, callback) {\n  // FIXME handle duration\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var accountError = \"Account not found\";\n    return callback(accountError);\n  }\n\n  var storedPassword = this.state.account_passwords[address.toLowerCase()];\n  if (storedPassword !== undefined && storedPassword !== password) {\n    var passwordError = \"Invalid password\";\n    return callback(passwordError);\n  }\n\n  this.state.unlocked_accounts[address.toLowerCase()] = true;\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_sendTransaction = function(txData, password, callback) {\n  if (txData.from == null) {\n    var error = \"Sender not found\";\n    callback(error);\n    return;\n  }\n\n  var from = utils.addHexPrefix(txData.from).toLowerCase();\n\n  var self = this;\n  self.personal_unlockAccount(from, password, null, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.state.queueTransaction(\"eth_sendTransaction\", txData, null, function(err, ret) {\n      self.state.unlocked_accounts[from.toLowerCase()] = false;\n      callback(err, ret);\n    });\n  });\n};\n\n/* Functions for testing purposes only. */\n\nGethApiDouble.prototype.evm_snapshot = function(callback) {\n  this.state.snapshot(callback);\n};\n\nGethApiDouble.prototype.evm_revert = function(snapshotId, callback) {\n  this.state.revert(snapshotId, callback);\n};\n\nGethApiDouble.prototype.evm_increaseTime = function(seconds, callback) {\n  callback(null, this.state.blockchain.increaseTime(seconds));\n};\n\nGethApiDouble.prototype.evm_setTime = function(date, callback) {\n  callback(null, this.state.blockchain.setTime(date));\n};\n\nGethApiDouble.prototype.evm_mine = function(timestamp, callback) {\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n  this.state.processBlock(timestamp, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(err, \"0x0\");\n  });\n};\n\n// indicate that `evm_mine` only requires one argument (the callback)\nGethApiDouble.prototype.evm_mine.minLength = 1;\n\nGethApiDouble.prototype.debug_traceTransaction = function(txHash, params, callback) {\n  if (typeof params === \"function\") {\n    callback = params;\n    params = [];\n  }\n\n  this.state.queueTransactionTrace(txHash, params, callback);\n};\n\n/*\n  RPC AUDIT:\n  TODO ETH: eth_getUncleCountByBlockHash, eth_getUncleCountByBlockNumber, eth_getUncleByBlockHashAndIndex,\n        eth_getUncleByBlockNumberAndIndex, eth_getWork, eth_submitWork, eth_submitHashrate\n\n  TODO DB: db_putString, db_getString, db_putHex, db_getHex\n\n  TODO WHISPER: shh_post, shh_newIdentity, shh_hasIdentity, shh_newGroup, shh_addToGroup,\n        shh_newFilter, shh_uninstallFilter, shh_getFilterChanges, shh_getMessages\n*/\n\n/**\n * Returns the number of uncles in a block from a block matching the given block hash.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block.\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockHash = function(hash, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns the number of uncles in a block from a block matching the given block number.\n *\n * @param {QUANTITY} blockNumber -\n *  ^integer of a block number, or the string \"latest\", \"earliest\" or \"pending\". Ex: '0xe8', // 232\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockNumber = function(blockNumber, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns information about a uncle of a block by hash and uncle index position.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block\n * @param {QUANTITY} index - the uncle's index position.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Object} result - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockHashAndIndex = function(hash, index, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns information about a uncle of a block by number and uncle index position.\n *\n * @param {QUANTITY} blockNumber -\n * ^a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default block parameter.\n * @param {QUANTITY} uncleIndex - the uncle's index position.\n * @callback callback\n * @param {error} err - Error object\n * @param {Object} resutl - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockNumberAndIndex = function(blockNumber, uncleIndex, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns: An Array with the following elements\n * 1: DATA, 32 Bytes - current block header pow-hash\n * 2: DATA, 32 Bytes - the seed hash used for the DAG.\n * 3: DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n *\n * @param {QUANTITY} filterId - A filter id\n * @callback callback\n * @param {error} err - Error object\n * @param {Array} result - the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n */\nGethApiDouble.prototype.eth_getWork = function(filterId, callback) {\n  callback(null, []);\n};\n\n/**\n * Used for submitting a proof-of-work solution\n *\n * @param {DATA, 8 Bytes} nonce - The nonce found (64 bits)\n * @param {DATA, 32 Bytes} powHash - The header's pow-hash (256 bits)\n * @param {DATA, 32 Bytes} digest - The mix digest (256 bits)\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the provided solution is valid, otherwise false.\n */\nGethApiDouble.prototype.eth_submitWork = function(nonce, powHash, digest, callback) {\n  callback(null, false);\n};\n\n/**\n * Used for submitting mining hashrate.\n *\n * @param {String} hashRate - a hexadecimal string representation (32 bytes) of the hash rate\n * @param {String} clientID - A random hexadecimal(32 bytes) ID identifying the client\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if submitting went through succesfully and false otherwise.\n */\nGethApiDouble.prototype.eth_submitHashrate = function(hashRate, clientID, callback) {\n  callback(null, false);\n};\n\n/**\n * Stores a string in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {String} value - String to store.\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putString = function(dbName, key, value, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns string from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} - Error Object\n * @param {String} result - The previously stored string.\n */\nGethApiDouble.prototype.db_getString = function(dbName, key, callback) {\n  callback(null, \"\");\n};\n\n/**\n * Stores binary data in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {DATA} data - Data to store.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putHex = function(dbName, key, data, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns binary data from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA} result - The previously stored data.\n */\nGethApiDouble.prototype.db_getHex = function(dbName, key, callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Sends a whisper message.\n *\n * @param {DATA, 60 Bytes} from - (optional) The identity of the sender.\n * @param {DATA, 60 Bytes} to -\n *  ^(optional) The identity of the receiver. When present whisper will encrypt the message so that\n *  only the receiver can decrypt it.\n * @param {Array of DATA} topics - Array of DATA topics, for the receiver to identify messages.\n * @param {DATA} payload - The payload of the message.\n * @param {QUANTITY} priority - The integer of the priority in a range from ... (?).\n * @param {QUANTITY} ttl - integer of the time to live in seconds.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the message was sent, otherwise false.\n */\nGethApiDouble.prototype.shh_post = function(from, to, topics, payload, priority, ttl, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates new whisper identity in the client.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new identiy.\n */\nGethApiDouble.prototype.shh_newIdentity = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Checks if the client hold the private keys for a given identity.\n *\n * @param {DATA, 60 Bytes} address - The identity address to check.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the client holds the privatekey for that identity, otherwise false.\n */\nGethApiDouble.prototype.shh_hasIdentity = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates a new group.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new group.\n */\nGethApiDouble.prototype.shh_newGroup = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Adds a whisper identity to the group\n *\n * @param {DATA, 60 Bytes} - The identity address to add to a group.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_addToGroup = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates filter to notify, when client receives whisper message matching the filter options.\n *\n * @param {DATA, 60 Bytes} to -\n * ^(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n *  if the client holds the private key to this identity.\n * @param {Array of DATA} topics - Array of DATA topics which the incoming message's topics should match.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_newFilter = function(to, topics, callback) {\n  callback(null, false);\n};\n\n/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n * Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - true if the filter was successfully uninstalled, otherwise false.\n */\nGethApiDouble.prototype.shh_uninstallFilter = function(id, callback) {\n  callback(null, false);\n};\n\n/**\n * Polling method for whisper filters. Returns new messages since the last call of this method.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n */\nGethApiDouble.prototype.shh_getFilterChanges = function(id, callback) {\n  callback(null, []);\n};\n\n/**\n * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - See: shh_getFilterChanges\n */\nGethApiDouble.prototype.shh_getMessages = function(id, callback) {\n  callback(null, false);\n};\n\nmodule.exports = GethApiDouble;\n","var Account = require(\"ethereumjs-account\").default;\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Transaction = require(\"./utils/transaction\");\nvar utils = require(\"ethereumjs-util\");\nvar seedrandom = require(\"seedrandom\");\nvar bip39 = require(\"bip39\");\nvar wallet = require(\"ethereumjs-wallet\");\nvar hdkey = require(\"ethereumjs-wallet/hdkey\");\nvar async = require(\"async\");\nvar BlockchainDouble = require(\"./blockchain_double.js\");\nvar ForkedBlockchain = require(\"./utils/forkedblockchain.js\");\nvar Web3 = require(\"web3\");\nvar fs = require(\"fs\");\nvar sigUtil = require(\"eth-sig-util\");\nvar _ = require(\"lodash\");\nconst { BlockOutOfRangeError } = require(\"./utils/errorhelper\");\nconst BN = utils.BN;\nconst rlp = require(\"rlp\");\nconst Common = require(\"ethereumjs-common\").default;\n\nconst ZERO_BUFFER = Buffer.from([0]);\n\nvar to = require(\"./utils/to\");\nvar random = require(\"./utils/random\");\nvar TXRejectedError = require(\"./utils/txrejectederror\");\n\nfunction StateManager(options, provider) {\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  if (options.fork) {\n    this.blockchain = new ForkedBlockchain(options);\n  } else {\n    this.blockchain = new BlockchainDouble(options);\n  }\n\n  this.vm = this.blockchain.vm;\n  this.stateTrie = this.blockchain.stateTrie;\n\n  this.accounts = {};\n  this.secure = !!options.secure;\n  this.account_passwords = {};\n  this.personal_accounts = {};\n  this.total_accounts = options.total_accounts;\n  this.coinbase = null;\n\n  this.latest_filter_id = 1;\n\n  // This queue manages actions that shouldn't be run in parallel.\n  // The action_processing flag ensures new actions are queued instead of\n  // run immediately.\n  this.action_queue = [];\n  this.action_processing = false;\n\n  this.snapshots = [];\n  this.logger = options.logger;\n  this.net_version = options.network_id;\n  this.mnemonic = options.mnemonic;\n  this.wallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(this.mnemonic));\n  this.wallet_hdpath = options.hdPath;\n\n  this.gasPriceVal = to.rpcQuantityHexString(options.gasPrice);\n\n  this.is_mining = true;\n  this.blockTime = options.blockTime;\n  this.is_mining_on_interval = !!options.blockTime;\n  this.mining_interval_timeout = null;\n\n  this._provider = provider;\n}\n\nconst defaultOptions = {\n  total_accounts: 10,\n  gasPrice: \"0x77359400\", // 2 gwei\n  default_balance_ether: 100,\n  unlocked_accounts: [],\n  hdPath: \"m/44'/60'/0'/0/\"\n};\n\nStateManager.prototype._applyDefaultOptions = function(options) {\n  // do this so that we can use the same seed on our next run and get the same\n  // results without explicitly setting a seed up front\n  if (!options.seed) {\n    options.seed = random.randomAlphaNumericString(10, seedrandom());\n  }\n\n  // generate a randomized default mnemonic\n  if (!options.mnemonic) {\n    let randomBytes = random.randomBytes(16, seedrandom(options.seed));\n    options.mnemonic = bip39.entropyToMnemonic(randomBytes.toString(\"hex\"));\n  }\n\n  if (!options.fork && !options.network_id) {\n    options.network_id = new Date().getTime();\n  }\n\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nStateManager.prototype.initialize = function(callback) {\n  var self = this;\n\n  var accounts = [];\n\n  let defaultBalanceWei = to.hex(Web3.utils.toWei(self.options.default_balance_ether.toString(), \"ether\"));\n\n  if (self.options.accounts) {\n    accounts = self.options.accounts.map(self.createAccount.bind(self));\n  } else {\n    if (!self.total_accounts) {\n      return callback(\n        new Error(\"Cannot initialize chain: either options.accounts or options.total_accounts must be specified\")\n      );\n    }\n\n    for (var i = 0; i < self.total_accounts; i++) {\n      accounts.push(\n        self.createAccount({\n          index: i,\n          balance: defaultBalanceWei\n        })\n      );\n    }\n  }\n\n  self.coinbase = to.hex(accounts[0].address);\n  self.accounts = {};\n\n  accounts.forEach(function(data) {\n    self.accounts[data.address] = data;\n    self.personal_accounts[data.address.toLowerCase()] = true;\n  });\n\n  // Turn array into object, mostly for speed purposes.\n  // No need for caller to specify private keys.\n  self.unlocked_accounts = self.options.unlocked_accounts.reduce(function(obj, address) {\n    // If it doesn't have a hex prefix, must be a number (either a string or number type).\n    if ((address + \"\").indexOf(\"0x\") !== 0) {\n      let idx = parseInt(address);\n      let account = accounts[idx];\n      if (!account) {\n        throw new Error(`Account at index ${idx} not found. Max index available is ${accounts.length - 1}.`);\n      }\n      address = account.address.toLowerCase();\n    }\n\n    obj[address.toLowerCase()] = true; // can be any value\n    return obj;\n  }, {});\n\n  if (!self.secure) {\n    accounts.forEach(function(data) {\n      self.unlocked_accounts[data.address.toLowerCase()] = data;\n    });\n  }\n\n  if (self.options.account_keys_path) {\n    const fileData = {\n      addresses: {},\n      private_keys: {}\n    };\n    accounts.forEach(function(account) {\n      fileData.private_keys[account.address] = account.secretKey.toString(\"hex\");\n      fileData.addresses[account.address] = account;\n    });\n    const json = JSON.stringify(fileData);\n    fs.writeFileSync(self.options.account_keys_path, json, \"utf8\");\n  }\n\n  self.blockchain.initialize(accounts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If the user didn't pass a specific version id in, then use the\n    // forked blockchain's version (if it exists) or create our own.\n    if (!self.net_version) {\n      self.net_version = self.blockchain.forkVersion;\n    }\n\n    if (self.is_mining_on_interval) {\n      self.mineOnInterval();\n    }\n    callback();\n  });\n};\n\nStateManager.prototype._minerCancellationToken = null;\nStateManager.prototype.mineOnInterval = function() {\n  // cancel the a previous miner's timeout\n  clearTimeout(this.mining_interval_timeout);\n\n  // make sure a pending eth_mine doesn't come back and execute mineOnInterval\n  // again...\n  if (this._minerCancellationToken !== null) {\n    this._minerCancellationToken.cancelled = true;\n  }\n\n  // if mining was stopped `mineOnInterval` shouldn't start mining again\n  if (!this.is_mining) {\n    this.logger.log(\"Warning: mineOnInterval called when miner was stopped\");\n    return;\n  }\n\n  const cancellationToken = { cancelled: false };\n  this._minerCancellationToken = cancellationToken;\n\n  const timeout = (this.mining_interval_timeout = setTimeout(\n    this._provider.send.bind(this._provider),\n    this.blockTime * 1000,\n    { method: \"evm_mine\" },\n    () => {\n      if (!cancellationToken.cancelled) {\n        this.mineOnInterval.bind(this)();\n      }\n    }\n  ));\n\n  // Ensure this won't keep a node process open.\n  if (typeof timeout.unref === \"function\") {\n    timeout.unref();\n  }\n};\n\nStateManager.prototype.createAccount = function(opts, i) {\n  var secretKey;\n\n  if (opts.generate) {\n    secretKey = wallet.generate().getPrivateKey();\n  } else if (opts.secretKey) {\n    secretKey = utils.toBuffer(to.hex(opts.secretKey));\n  } else {\n    var index = typeof opts.index === \"undefined\" ? i : opts.index;\n    var acct = this.wallet.derivePath(this.wallet_hdpath + index); // index is a number\n    secretKey = acct.getWallet().getPrivateKey(); // Buffer\n  }\n\n  var publicKey = utils.privateToPublic(secretKey);\n  var address = utils.publicToAddress(publicKey);\n\n  var account = new Account();\n\n  account.balance = to.hex(opts.balance);\n\n  var data = {\n    secretKey: secretKey,\n    publicKey: publicKey,\n    address: to.hex(address).toLowerCase(),\n    account: account\n  };\n\n  return data;\n};\n\nStateManager.prototype.blockNumber = function(callback) {\n  return this.blockchain.getHeight(callback);\n};\n\nStateManager.prototype.gasPrice = function() {\n  return this.gasPriceVal;\n};\n\nStateManager.prototype.getBalance = function(address, number, callback) {\n  this.blockchain.getBalance(address, number, function(err, balance) {\n    if (balance) {\n      balance = to.rpcQuantityHexString(balance);\n    }\n    callback(err, balance);\n  });\n};\n\nStateManager.prototype.getTransactionCount = function(address, number, callback) {\n  this.blockchain.getNonce(address, number, function(err, nonce) {\n    if (nonce) {\n      nonce = to.rpcQuantityHexString(nonce);\n    }\n    callback(err, nonce);\n  });\n};\n\nStateManager.prototype.getCode = function(address, number, callback) {\n  this.blockchain.getCode(address, number, function(err, code) {\n    if (code) {\n      code = to.hex(code);\n    }\n    callback(err, code);\n  });\n};\n\nStateManager.prototype.queueRawTransaction = function(data, callback) {\n  // a hack until we get chainid and networkId alignment\n  // in the next major (breaking_change) version:\n  // Reason: historically we didn't validate chain ids.\n  let chainId;\n  if (Buffer.isBuffer(data)) {\n    let decodedData = rlp.decode(data);\n    let v = decodedData[6];\n    if (v !== undefined) {\n      v = utils.bufferToInt(v);\n      chainId = Math.floor((v - 35) / 2);\n      if (chainId < 0) {\n        chainId = 0;\n      }\n    }\n  }\n  let common = !chainId\n    ? this.blockchain.vm.opts.common\n    : Common.forCustomChain(\n      \"mainnet\", // TODO needs to match chain id\n      {\n        name: \"ganache\",\n        networkId: this.options.network_id || this.forkVersion,\n        chainId,\n        comment: \"Local test network\",\n        bootstrapNodes: []\n      },\n      this.options.hardfork\n    );\n  let tx = new Transaction(data, Transaction.types.signed, common);\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = to.hex(tx.from).toLowerCase();\n  this._queueTransaction(\"eth_sendRawTransaction\", tx, from, null, callback);\n};\n\nStateManager.prototype.queueStorage = function(address, position, block, callback) {\n  this.action_queue.push({\n    method: \"eth_getStorageAt\",\n    address: utils.addHexPrefix(address),\n    position: utils.addHexPrefix(position),\n    block: block,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransaction = function(method, txJsonRpc, blockNumber, callback) {\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = txJsonRpc.from ? to.hex(txJsonRpc.from).toLowerCase() : null;\n\n  if (from == null) {\n    callback(new TXRejectedError(\"from not found; is required\"));\n    return;\n  }\n\n  // Error checks. It's possible to JSON.stringify a Buffer to JSON.\n  // we actually now handle this \"properly\" (not sure about spec), but for\n  // legacy reasons we don't allow it.\n  if (txJsonRpc.to && typeof txJsonRpc.to !== \"string\") {\n    return callback(new TXRejectedError(\"Invalid to address\"));\n  }\n\n  const isKnownAccount = this.accounts.hasOwnProperty(from);\n\n  if (method === \"eth_sendTransaction\" && !this.unlocked_accounts.hasOwnProperty(from)) {\n    const msg = isKnownAccount ? \"signer account is locked\" : \"sender account not recognized\";\n    return callback(new TXRejectedError(msg));\n  }\n\n  let type = Transaction.types.none;\n  if (!isKnownAccount || method === \"eth_call\" || method === \"eth_estimateGas\") {\n    type |= Transaction.types.fake;\n  }\n\n  let tx;\n  try {\n    tx = Transaction.fromJSON(txJsonRpc, type, this.blockchain.vm.opts.common);\n    this._setTransactionDefaults(tx, method === \"eth_sendTransaction\");\n  } catch (e) {\n    callback(e);\n    return;\n  }\n  this._queueTransaction(method, tx, from, blockNumber, callback);\n};\n\nStateManager.prototype._setTransactionDefaults = function(tx, isTransaction) {\n  if (isTransaction && tx.gasLimit.length === 0) {\n    tx.gasLimit = utils.toBuffer(this.blockchain.defaultTransactionGasLimit);\n  }\n\n  if (tx.gasPrice.length === 0) {\n    tx.gasPrice = utils.toBuffer(this.gasPriceVal);\n  }\n\n  if (tx.value.length === 0) {\n    tx.value = Buffer.from([0]);\n  }\n\n  if (tx.to.length === 0 || tx.to.equals(ZERO_BUFFER)) {\n    tx.to = Buffer.allocUnsafe(0);\n  }\n};\n\nStateManager.prototype._queueTransaction = function(method, tx, from, blockNumber, callback) {\n  if (!(tx instanceof Transaction)) {\n    throw new TXRejectedError(\"tx must be of type Transaction\");\n  }\n\n  // If the transaction has a higher gas limit than the block gas limit, error.\n  if (\n    (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") &&\n    to.number(tx.gasLimit) > to.number(this.blockchain.blockGasLimit)\n  ) {\n    return callback(new TXRejectedError(\"Exceeds block gas limit\"));\n  }\n\n  this.action_queue.push({\n    method,\n    from,\n    tx,\n    callback,\n    blockNumber\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransactionTrace = function(txHash, params, callback) {\n  this.action_queue.push({\n    method: \"debug_traceTransaction\",\n    hash: to.hex(txHash),\n    params: params,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.processNextAction = function(override) {\n  var self = this;\n\n  if (override !== true) {\n    if (this.action_processing === true || this.action_queue.length === 0) {\n      return;\n    }\n  }\n\n  var queued = this.action_queue.shift();\n\n  // Set the flag that we're currently processing something.\n  this.action_processing = true;\n\n  var intermediary = function(err, result) {\n    queued.callback(err, result);\n\n    if (self.action_queue.length > 0) {\n      self.processNextAction(true);\n    } else {\n      self.action_processing = false;\n    }\n  };\n\n  if (typeof queued.method === \"function\") {\n    var result = queued.method();\n    return intermediary(null, result);\n  } else if (queued.method === \"eth_getStorageAt\") {\n    this.blockchain.getStorage(queued.address, queued.position, queued.block, function(err, result) {\n      if (err) {\n        return intermediary(err);\n      }\n\n      if (result) {\n        result = utils.rlp.decode(result);\n      }\n\n      result = to.hex(result || 0);\n      intermediary(null, result);\n    });\n  } else if (queued.method === \"debug_traceTransaction\") {\n    this.blockchain.processTransactionTrace(queued.hash, queued.params, intermediary);\n  } else if (queued.method === \"eth_sendTransaction\" || queued.method === \"eth_sendRawTransaction\") {\n    this.processTransaction(queued.from, queued.tx, intermediary);\n  } else if (queued.method === \"eth_call\") {\n    this.processCall(queued.from, queued.tx, queued.blockNumber, intermediary);\n  } else if (queued.method === \"eth_estimateGas\") {\n    this.processGasEstimate(queued.from, queued.tx, queued.blockNumber, intermediary);\n  }\n};\n\nStateManager.prototype.sign = function(address, dataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  var secretKey = account.secretKey;\n  var msg = to.buffer(dataToSign, \"hex\");\n  var msgHash = utils.hashPersonalMessage(msg);\n  var sgn = utils.ecsign(msgHash, Buffer.from(secretKey));\n  // ethereumjs-utils changed the behavior of toRpcSig so that the `v` value\n  // output by `toRpcSig` is always `sgn.v - 27` (basically `0` or `1`). In\n  // order to avoid a breaking change in Ganache at this time we are calculating\n  // a chain ID that will always a) validate the v, and b) generate an output v\n  // of `0` or `1`, like it used to.\n  const v = sgn.v - 27;\n  const chainId = (v - 35) / 2;\n  return utils.toRpcSig(v, sgn.r, sgn.s, chainId);\n};\n\nStateManager.prototype.signTypedData = function(address, typedDataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  if (!typedDataToSign.types) {\n    throw new Error(\"cannot sign data; types missing\");\n  }\n\n  if (!typedDataToSign.types.EIP712Domain) {\n    throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n  }\n\n  if (!typedDataToSign.domain) {\n    throw new Error(\"cannot sign data; domain missing\");\n  }\n\n  if (!typedDataToSign.primaryType) {\n    throw new Error(\"cannot sign data; primaryType missing\");\n  }\n\n  if (!typedDataToSign.message) {\n    throw new Error(\"cannot sign data; message missing\");\n  }\n\n  return sigUtil.signTypedData_v4(account.secretKey, { data: typedDataToSign });\n};\n\nStateManager.prototype.printTransactionReceipt = function(txHash, error, callback) {\n  var self = this;\n\n  self.blockchain.getTransactionReceipt(txHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      receipt = receipt.toJSON();\n\n      self.logger.log(\"\");\n      self.logger.log(\"  Transaction: \" + txHash);\n\n      if (receipt.contractAddress != null) {\n        self.logger.log(\"  Contract created: \" + receipt.contractAddress);\n      }\n\n      self.logger.log(\"  Gas usage: \" + parseInt(receipt.gasUsed, 16));\n      self.logger.log(\"  Block Number: \" + parseInt(receipt.blockNumber, 16));\n      self.logger.log(\"  Block Time: \" + new Date(to.number(block.header.timestamp) * 1000).toString());\n\n      if (error) {\n        self.logger.log(\"  Runtime Error: \" + error.error);\n        if (error.reason) {\n          self.logger.log(\"  Revert reason: \" + error.reason);\n        }\n      }\n\n      self.logger.log(\"\");\n\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.processBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = null;\n  }\n\n  self.blockchain.processNextBlock(timestamp, function(runtimeError, transactions, vmOutput) {\n    if (runtimeError && runtimeError instanceof RuntimeError === false) {\n      // This is bad. Get out.\n      return callback(runtimeError, transactions, vmOutput);\n    }\n\n    // TODO: Can we refactor printTransactionReceipt so it's synchronous?\n    // We technically have the raw vm receipts (though they're not full receipts here...).\n    async.eachSeries(\n      transactions,\n      function(tx, finishedPrinting) {\n        var hash = to.hex(tx.hash());\n        var error = runtimeError == null ? { results: {} } : runtimeError;\n        self.printTransactionReceipt(hash, error.results[hash], finishedPrinting);\n      },\n      callback(runtimeError, transactions, vmOutput)\n    );\n  });\n};\n\nStateManager.prototype.processBlocks = function(totalBlocks, callback) {\n  var self = this;\n\n  if (typeof totalBlocks === \"function\") {\n    callback = totalBlocks;\n    totalBlocks = null;\n  }\n\n  // Note: VM errors (errors that the VM directly returns) trump all runtime errors.\n  var runtimeError = null;\n  var amountProcessed = 0;\n\n  async.whilst(\n    function() {\n      var shouldContinue;\n\n      if (totalBlocks == null) {\n        shouldContinue = self.blockchain.pending_transactions.length > 0;\n      } else {\n        shouldContinue = amountProcessed < totalBlocks;\n      }\n\n      return shouldContinue;\n    },\n    function(done) {\n      self.processBlock(function(err, transactions, vmOutput) {\n        amountProcessed += 1;\n\n        if (err) {\n          if (err instanceof RuntimeError === false) {\n            // This is bad. Get out.\n            return done(err);\n          }\n\n          // We must have a RuntimeError. Merge results if we've found\n          // other runtime errors during this execution.\n          if (runtimeError == null) {\n            runtimeError = err;\n          } else {\n            runtimeError.combine(err);\n          }\n        }\n\n        // Note we don't quit on runtime errors. We keep processing transactions.\n        done();\n      });\n    },\n    function(err) {\n      // Remember: vm errors trump runtime errors\n      callback(err || runtimeError);\n    }\n  );\n};\n\nStateManager.prototype.processCall = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  function next(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        if (err instanceof BlockOutOfRangeError) {\n          // block doesn't exist\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n\n      var result = \"0x\";\n      if (!results.error && results.execResult.returnValue) {\n        result = to.hex(results.execResult.returnValue);\n      } else if (results.error) {\n        self.logger.log(`Error processing call: ${results.error}`);\n      }\n\n      return callback(null, result);\n    });\n  }\n\n  // `eth_call` should never need to validate an existing nonce\n  if (tx.nonce.length === 0) {\n    self.createTransactionWithCorrectNonce(tx, from, next);\n  } else {\n    next(null, tx);\n  }\n};\n\nStateManager.prototype.processGasEstimate = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  function next(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.estimateGas(tx, blockNumber, function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var result = \"0x\";\n      if (!results.error) {\n        result = to.hex(results.gasEstimate);\n      } else {\n        self.logger.log(`Error calculating gas estimate: ${results.error}`);\n      }\n      return callback(null, result);\n    });\n  }\n\n  // `eth_estimateGas` should never need to validate an existing nonce\n  if (tx.nonce.length === 0) {\n    self.createTransactionWithCorrectNonce(tx, from, next);\n  } else {\n    next(null, tx);\n  }\n};\n\nStateManager.prototype.processTransaction = function(from, tx, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.queueTransaction(tx);\n\n    var txHash = to.hex(tx.hash());\n\n    // If we're not currently mining or we're mining on an interval,\n    // only queue the transaction, don't process it.\n    if (self.is_mining === false || self.is_mining_on_interval) {\n      return callback(null, txHash);\n    }\n\n    self.processBlocks(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.getTransactionReceipt = function(hash, callback) {\n  this.blockchain.getTransactionReceipt(hash, function(err, receipt) {\n    if (err && err.notFound) {\n      // Return null if the receipt's not found.\n      return callback(null, null);\n    }\n    callback(err, receipt);\n  });\n};\n\nStateManager.prototype.getBlock = function(hashOrNumber, callback) {\n  this.blockchain.getBlock(hashOrNumber, callback);\n};\n\nStateManager.prototype.getLogs = function(filter, callback) {\n  var self = this;\n\n  // filter.address may be a single address or an array\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\n  var expectedAddress = filter.address && (Array.isArray(filter.address) ? filter.address : [filter.address]);\n  expectedAddress =\n    expectedAddress &&\n    expectedAddress.map(function(a) {\n      return a.toLowerCase();\n    });\n  var expectedTopics = filter.topics || [];\n\n  async.parallel(\n    {\n      fromBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.fromBlock || \"latest\"),\n      toBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.toBlock || \"latest\"),\n      latestBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, \"latest\")\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var fromBlock = results.fromBlock;\n      var toBlock = results.toBlock;\n      var latestBlock = results.latestBlock;\n\n      if (toBlock > latestBlock) {\n        toBlock = latestBlock;\n      }\n\n      var logs = [];\n      var current = fromBlock;\n\n      async.whilst(\n        function() {\n          return current <= toBlock;\n        },\n        function(finished) {\n          self.blockchain.getBlockLogs(current, function(err, blockLogs) {\n            if (err) {\n              return finished(err);\n            }\n\n            // Filter logs that match the address\n            var filtered = !expectedAddress\n              ? blockLogs\n              : blockLogs.filter(function(log) {\n                return expectedAddress.indexOf(log.address.toLowerCase()) > -1;\n              });\n\n            // Now filter based on topics.\n            filtered = filtered.filter(function(log) {\n              var keep = true;\n              for (var i = 0; i < expectedTopics.length; i++) {\n                var expectedTopic = expectedTopics[i];\n                var logTopic = log.topics[i];\n                if (expectedTopic == null) {\n                  continue;\n                }\n                var isMatch = Array.isArray(expectedTopic)\n                  ? expectedTopic.includes(logTopic)\n                  : expectedTopic === logTopic;\n                if (i >= log.topics.length || !isMatch) {\n                  keep = false;\n                  break;\n                }\n              }\n              return keep;\n            });\n\n            logs.push.apply(logs, filtered);\n\n            current += 1;\n            finished();\n          });\n        },\n        function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          logs = logs.map(function(log) {\n            return log.toJSON();\n          });\n\n          callback(err, logs);\n        }\n      );\n    }\n  );\n};\n\n// Note: Snapshots have 1-based ids.\nStateManager.prototype.snapshot = function(callback) {\n  var self = this;\n\n  this.blockchain.getHeight(function(err, blockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.snapshots.push({\n      blockNumber: blockNumber,\n      timeAdjustment: self.blockchain.timeAdjustment\n    });\n\n    self.logger.log(\"Saved snapshot #\" + self.snapshots.length);\n\n    callback(null, to.hex(self.snapshots.length));\n  });\n};\n\nStateManager.prototype.revert = function(snapshotId, callback) {\n  var self = this;\n\n  if (snapshotId === null || snapshotId === undefined) {\n    callback(new Error(\"invalid snapshotId\"));\n    return;\n  }\n  // Convert from hex.\n  try {\n    snapshotId = utils.bufferToInt(snapshotId);\n  } catch (e) {\n    callback(e);\n    return;\n  }\n\n  this.logger.log(\"Reverting to snapshot #\" + snapshotId);\n\n  if (snapshotId > this.snapshots.length || snapshotId <= 0) {\n    // the snapshot doesn't exist now, or it has already been reverted\n    callback(null, false);\n    return false;\n  }\n\n  // Convert to zero based.\n  snapshotId = snapshotId - 1;\n  var timeAdjustment = this.snapshots[snapshotId].timeAdjustment;\n\n  // Loop through each snapshot with a higher id than the current one.\n  async.whilst(\n    function() {\n      return self.snapshots.length > snapshotId;\n    },\n    function(nextSnapshot) {\n      var snapshot = self.snapshots.pop();\n\n      // For each snapshot, asynchronously pop off the blocks it represents.\n      async.during(\n        function(doneWithTest) {\n          self.blockchain.getHeight(function(err, blockNumber) {\n            if (err) {\n              return doneWithTest(err);\n            }\n\n            doneWithTest(null, blockNumber > snapshot.blockNumber);\n          });\n        },\n        function(nextBlock) {\n          self.blockchain.popBlock(function(err) {\n            if (err) {\n              return nextBlock(err);\n            }\n            nextBlock();\n          });\n        },\n        nextSnapshot\n      );\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Pending transactions are removed when you revert.\n      self.blockchain.clearPendingTransactions();\n      // The time adjustment is restored to its prior state\n      self.blockchain.timeAdjustment = timeAdjustment;\n\n      callback(null, true);\n    }\n  );\n};\n\nStateManager.prototype.hasContractCode = function(address, callback) {\n  this.vm.stateManager.getContractCode(address, function(err, result) {\n    if (err != null) {\n      callback(err, false);\n    } else {\n      callback(null, true);\n    }\n  });\n};\n\nStateManager.prototype.startMining = function(callback) {\n  if (this.is_mining) {\n    process.nextTick(callback);\n    this.logger.log(\"Warning: startMining called when miner was already started\");\n    return;\n  }\n\n  this.is_mining = true;\n\n  if (this.is_mining_on_interval) {\n    this.mineOnInterval();\n    process.nextTick(callback);\n  } else {\n    this.processBlocks(callback);\n  }\n};\n\nStateManager.prototype.stopMining = function(callback) {\n  if (this.is_mining) {\n    if (this._minerCancellationToken) {\n      this._minerCancellationToken.cancelled = true;\n      this._minerCancellationToken = null;\n    }\n    this.is_mining = false;\n    clearTimeout(this.mining_interval_timeout);\n    this.mining_interval_timeout = null;\n  } else {\n    this.logger.log(\"Warning: stopMining called when miner was already stopped\");\n  }\n  callback && process.nextTick(callback);\n};\n\nStateManager.prototype.isUnlocked = function(address) {\n  return this.unlocked_accounts[address.toLowerCase()] != null;\n};\n\nStateManager.prototype.createTransactionWithCorrectNonce = function(tx, from, callback) {\n  // account for transactions waiting in the tx queue\n  this.blockchain.getQueuedNonce(from, (err, expectedNonce) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const validateNonce = (tx, expectedNonce) => {\n      if (tx.validateNonce(expectedNonce)) {\n        return Promise.resolve(tx);\n      } else {\n        const expected = new BN(expectedNonce).toString(10);\n        const actual = new BN(tx.nonce).toString(10);\n        return Promise.reject(\n          new TXRejectedError(\n            `the tx doesn't have the correct nonce. account has nonce of: ${expected} tx has nonce of: ${actual}`\n          )\n        );\n      }\n    };\n    const done = (tx) => callback(null, tx);\n\n    if (tx.isSigned()) {\n      validateNonce(tx, expectedNonce)\n        .then(done)\n        .catch(callback);\n    } else {\n      const sign = (tx) => {\n        // we need to sign transactions if they haven't been signed already\n        // but we never sign fake transactions\n        if (!tx.isFake() && !tx.isSigned()) {\n          const account = this.accounts[from];\n          if (account) {\n            tx.sign(account.secretKey);\n          }\n        }\n        return Promise.resolve(tx);\n      };\n\n      // Validate the tx's nonce and then sign the transaction.\n      // By signing this transaction now we ensure all future calls to tx.hash()\n      // return the same signed transaction hash. It's sort of an unintuitive\n      // quirk of etheremjs-tx that:\n      //   tx.hash(includeSignature);\n      //   tx.sign(secretKey);\n      //   tx.hash(includeSignature);\n      // will produce different hashes.\n      if (tx.nonce.length === 0) {\n        // Since this transaction is unsigned and the nonce was not defined\n        // we can go ahead and change the nonce and not worry about\n        // invalidating the tx hash the client may be expecting (automatic nonce\n        // calculation should have been expected by the client in this case).\n        tx.nonce = expectedNonce;\n        sign(tx).then(done);\n      } else {\n        validateNonce(tx, expectedNonce)\n          .then(sign)\n          .then(done)\n          .catch(callback);\n      }\n    }\n  });\n};\nmodule.exports = StateManager;\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"assert\");","module.exports = require(\"seedrandom\");","module.exports = require(\"bip39\");","module.exports = require(\"safe-buffer\");","module.exports = require(\"randombytes\");","module.exports = require(\"scrypt.js\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"bs58check\");","'use strict';\n\nvar HDKey = require('hdkey');\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n\n/*\n * Horrible wrapping.\n */\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;","module.exports = require(\"hdkey\");","module.exports = require(\"ethereumjs-vm\");","module.exports = require(\"heap\");","var LevelUpArrayAdapter = require(\"./database/leveluparrayadapter\");\nvar LevelUpObjectAdapter = require(\"./database/levelupobjectadapter\");\nvar levelup = require(\"levelup\");\nvar encode = require(\"encoding-down\");\nvar filedown = require(\"./database/filedown\");\nvar cachedown = require(\"cachedown\");\nvar txserializer = require(\"./database/txserializer\");\nvar blockserializer = require(\"./database/blockserializer\");\nvar bufferserializer = require(\"./database/bufferserializer\");\nvar BlockLogsSerializer = require(\"./database/blocklogsserializer\");\nvar ReceiptSerializer = require(\"./database/receiptserializer\");\nvar tmp = require(\"tmp\");\n\nfunction Database(options) {\n  this.options = options;\n  this.directory = null;\n}\n\nDatabase.prototype.initialize = function(callback) {\n  var self = this;\n\n  function getDir(cb) {\n    if (self.options.db_path) {\n      cb(null, self.options.db_path);\n    } else {\n      tmp.dir(cb);\n    }\n  }\n\n  getDir(function(err, directory) {\n    if (err) {\n      return callback(err);\n    }\n    const levelupOptions = { valueEncoding: \"json\" };\n    if (self.options.db) {\n      const store = self.options.db;\n      levelup(store, levelupOptions, finishInitializing);\n    } else {\n      self.directory = directory;\n      const store = encode(cachedown(directory, filedown).maxSize(100), levelupOptions);\n      levelup(store, {}, finishInitializing);\n    }\n  });\n\n  function finishInitializing(err, db) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db = db;\n\n    // Blocks, keyed by array index (not necessarily by block number) (0-based)\n    self.blocks = new LevelUpArrayAdapter(\"blocks\", self.db, blockserializer);\n\n    // Logs triggered in each block, keyed by block id (ids in the blocks array; not necessarily block number) (0-based)\n    self.blockLogs = new LevelUpArrayAdapter(\"blockLogs\", self.db, new BlockLogsSerializer(self));\n\n    // Block hashes -> block ids (ids in the blocks array; not necessarily block number) for quick lookup\n    self.blockHashes = new LevelUpObjectAdapter(\"blockHashes\", self.db);\n\n    // Transaction hash -> transaction objects\n    self.transactions = new LevelUpObjectAdapter(\"transactions\", self.db, txserializer);\n\n    // Transaction hash -> transaction receipts\n    self.transactionReceipts = new LevelUpObjectAdapter(\"transactionReceipts\", self.db, new ReceiptSerializer(self));\n\n    self.trie_db = new LevelUpObjectAdapter(\"trie_db\", self.db, bufferserializer, bufferserializer);\n\n    callback();\n  }\n};\n\nDatabase.prototype.close = function(callback) {\n  callback();\n};\n\nmodule.exports = Database;\n","var Sublevel = require(\"level-sublevel\");\nconst { LevelUpOutOfRangeError, BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\n// Level up adapter that looks like an array. Doesn't support inserts.\n\nfunction LevelUpArrayAdapter(name, db, serializer) {\n  this.db = Sublevel(db);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.serializer = serializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpArrayAdapter.prototype.length = function(callback) {\n  this.db.get(\"length\", function(err, result) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, 0);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, result);\n  });\n};\n\nLevelUpArrayAdapter.prototype._get = function(key, callback) {\n  var self = this;\n  this.db.get(key, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n    self.serializer.decode(val, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype._put = function(key, value, callback) {\n  var self = this;\n  this.serializer.encode(value, function(err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n    self.db.put(key, encoded, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.get = function(index, callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    if (index >= length) {\n      // index out of range\n      let RangeError =\n        self.name === \"blocks\"\n          ? new BlockOutOfRangeError(index, length)\n          : new LevelUpOutOfRangeError(self.name, index, length);\n      return callback(RangeError);\n    }\n    self._get(index, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.push = function(val, callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    // TODO: Do this in atomic batch.\n    self._put(length + \"\", val, function(err) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.put(\"length\", length + 1, callback);\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.pop = function(callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var newLength = length - 1;\n\n    // TODO: Do this in atomic batch.\n    self._get(newLength + \"\", function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.del(newLength + \"\", function(err) {\n        if (err) {\n          return callback(err);\n        }\n        self.db.put(\"length\", newLength, function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, val);\n        });\n      });\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.last = function(callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (length === 0) {\n      return callback(null, null);\n    }\n\n    self._get(length - 1 + \"\", callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.first = function(callback) {\n  this._get(\"0\", callback);\n};\n\nmodule.exports = LevelUpArrayAdapter;\n","var Sublevel = require(\"level-sublevel\");\nvar async = require(\"async\");\n\nfunction LevelUpObjectAdapter(name, db, valueserializer, keyserializer, options) {\n  this.db = Sublevel(db, options);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.valueserializer = valueserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n  this.keyserializer = keyserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpObjectAdapter.prototype.get = function(key, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.get(encodedKey, function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.valueserializer.decode(val, function(err, decodedValue) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, decodedValue);\n      });\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.put = function(key, value, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.valueserializer.encode(value, function(err, encoded) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.db.put(encodedKey, encoded, callback);\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.set = LevelUpObjectAdapter.prototype.put;\n\nLevelUpObjectAdapter.prototype.del = function(key, callback) {\n  var self = this;\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.del(encodedKey, callback);\n  });\n};\n\nLevelUpObjectAdapter.prototype.batch = function(array, options, callback) {\n  var self = this;\n\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nLevelUpObjectAdapter.prototype.isOpen = function() {\n  return true;\n};\n\nmodule.exports = LevelUpObjectAdapter;\n","module.exports = require(\"levelup\");","module.exports = require(\"encoding-down\");","var util = require(\"util\");\nvar AbstractLevelDOWN = require(\"abstract-leveldown\").AbstractLevelDOWN;\nvar async = require(\"async\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nutil.inherits(FileDown, AbstractLevelDOWN);\n\nfunction FileDown(location) {\n  this.location = location;\n  AbstractLevelDOWN.call(this, location);\n}\n\nFileDown.prototype._open = function(options, callback) {\n  var self = this;\n  callback(null, self);\n};\n\nFileDown.prototype._put = function(key, value, options, callback) {\n  fs.writeFile(path.join(this.location, key), value, \"utf8\", callback);\n};\n\nFileDown.prototype._get = function(key, options, callback) {\n  fs.readFile(path.join(this.location, key), \"utf8\", function(err, data) {\n    if (err) {\n      return callback(new Error(\"NotFound\"));\n    }\n    callback(null, data);\n  });\n};\n\nFileDown.prototype._del = function(key, options, callback) {\n  fs.unlink(path.join(this.location, key), function(err) {\n    // Ignore when we try to delete a file that doesn't exist.\n    // I'm not sure why this happens. Worth looking into.\n    if (err) {\n      if (err.message.indexOf(\"ENOENT\") >= 0) {\n        return callback();\n      } else {\n        return callback(err);\n      }\n    }\n    callback();\n  });\n};\n\nFileDown.prototype._batch = function(array, options, callback) {\n  var self = this;\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, options, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nmodule.exports = function(location) {\n  return new FileDown(location);\n};\n","module.exports = require(\"abstract-leveldown\");","module.exports = require(\"path\");","module.exports = require(\"cachedown\");","var txserializer = require(\"./txserializer\");\nvar async = require(\"async\");\nvar Block = require(\"ethereumjs-block\");\n\nmodule.exports = {\n  encode: function(block, done) {\n    var encoded = block.toJSON(true);\n\n    async.map(\n      block.transactions,\n      function(tx, finished) {\n        txserializer.encode(tx, finished);\n      },\n      function(err, transactions) {\n        if (err) {\n          return done(err);\n        }\n        encoded.transactions = transactions;\n        done(null, encoded);\n      }\n    );\n  },\n  decode: function(json, done) {\n    var transactions = json.transactions;\n    json.transactions = [];\n\n    var block = new Block(json);\n\n    async.eachSeries(\n      transactions,\n      function(txJson, finished) {\n        txserializer.decode(txJson, function(err, tx) {\n          if (err) {\n            return finished(err);\n          }\n          block.transactions.push(tx);\n          finished();\n        });\n      },\n      function(err) {\n        if (err) {\n          return done(err);\n        }\n\n        done(null, block);\n      }\n    );\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar to = require(\"../utils/to\");\n\nmodule.exports = {\n  encode: function(val, cb) {\n    var hex = to.hex(val);\n    cb(null, hex);\n  },\n  decode: function(json, cb) {\n    cb(null, utils.toBuffer(json));\n  }\n};\n","var Log = require(\"../utils/log\");\nvar async = require(\"async\");\n\nfunction BlockLogsSerializer(database) {\n  this.database = database;\n}\n\nBlockLogsSerializer.prototype.encode = function(logs, done) {\n  logs = logs.map(function(log) {\n    return log.toJSON();\n  });\n\n  done(null, logs);\n};\n\nBlockLogsSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  if (json.length === 0) {\n    return done(null, []);\n  }\n\n  this.database.blockHashes.get(json[0].blockHash, function(err, blockIndex) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blocks.get(blockIndex, function(err, block) {\n      if (err) {\n        return done(err);\n      }\n\n      async.map(\n        json,\n        function(log, finished) {\n          finished(\n            null,\n            new Log({\n              block: block,\n              logIndex: log.logIndex,\n              transactionIndex: log.transactionIndex,\n              transactionHash: log.transactionHash,\n              address: log.address,\n              data: log.data,\n              topics: log.topics,\n              type: log.type\n            })\n          );\n        },\n        function(err, logs) {\n          if (err) {\n            return done(err);\n          }\n          done(null, logs);\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = BlockLogsSerializer;\n","var Receipt = require(\"../utils/receipt\");\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function(receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function(json, done) {\n  var self = this;\n  // Make sure we can handle mixed/upper-case transaction hashes\n  // it doesn't seem possible to record a transaction hash that isn't\n  // already lower case, as that's the way ganache generates them, however\n  // I don't think it will hurt anything to normalize here anyway.\n  // If you can figure out how to test this please feel free to add a test!\n  var txHash = json.transactionHash.toLowerCase();\n\n  this.database.transactions.get(json.transactionHash, function(err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function(err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel(\n        {\n          block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n          logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n        },\n        function(err, result) {\n          if (err) {\n            return done(err);\n          }\n\n          done(\n            null,\n            new Receipt(\n              tx,\n              result.block,\n              result.logs.filter((log) => log.transactionHash.toLowerCase() === txHash),\n              json.gasUsed,\n              json.cumulativeGasUsed,\n              json.contractAddress,\n              json.status,\n              json.logsBloom\n            )\n          );\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;\n","module.exports = require(\"tmp\");","const estimateGas = require(\"./guestimation\");\nconst binSearch = require(\"./binSearch\");\n\nmodule.exports = async(generateVM, runArgs, callback) => {\n  const vm = generateVM();\n  estimateGas(vm, runArgs, async(err, result) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    await binSearch(generateVM, runArgs, result, callback);\n  });\n};\n","const RuntimeError = require(\"../runtimeerror\");\n\nconst { BN } = require(\"ethereumjs-util\");\nconst bn = (val = 0) => new BN(val);\nconst STIPEND = bn(2300);\n\nconst check = (set) => (opname) => set.has(opname);\nconst isCall = check(new Set([\"CALL\", \"DELEGATECALL\", \"STATICCALL\", \"CALLCODE\"]));\nconst isCallOrCallcode = check(new Set([\"CALL\", \"CALLCODE\"]));\nconst isCreate = check(new Set([\"CREATE\", \"CREATE2\"]));\nconst isTerminator = check(new Set([\"STOP\", \"RETURN\", \"REVERT\", \"INVALID\", \"SELFDESTRUCT\"]));\n\nmodule.exports = async(vm, runArgs, callback) => {\n  const steps = stepTracker();\n  vm.on(\"step\", steps.collect);\n\n  const Context = (index, fee) => {\n    const base = index === 0;\n    let start = index;\n    let stop = 0;\n    let cost = bn();\n    let sixtyFloorths = bn();\n    const op = steps.ops[index];\n    const next = steps.ops[index + 1];\n    const intermediateCost = op.gasLeft.sub(next.gasLeft);\n    const callingFee = fee || bn();\n    let compositeContext = false;\n\n    function addGas(val) {\n      // Add to our current context, but accounted for in sixtyfloorths\n      if (sixtyFloorths.gtn(0)) {\n        if (val.gte(sixtyFloorths)) {\n          sixtyFloorths = bn();\n        } else {\n          sixtyFloorths.isub(val);\n        }\n      }\n      cost.iadd(val);\n    }\n\n    return {\n      start: () => start,\n      stop: () => stop,\n      setStart: (val) => {\n        start = val;\n        compositeContext = true;\n      },\n      setStop: (val) => {\n        stop = val;\n      },\n      getCost: () => ({ cost, sixtyFloorths }),\n      transfer: (ctx) => {\n        const values = ctx.getCost();\n        addGas(values.cost);\n        sixtyFloorths.iadd(values.sixtyFloorths);\n      },\n      addSixtyFloorth: (sixtyFloorth) => {\n        sixtyFloorths.iadd(sixtyFloorth);\n      },\n      addRange: (fee = bn()) => {\n        // only occurs on stack increasing ops\n        addGas(steps.ops[base || compositeContext ? start : start + 1].gasLeft.sub(steps.ops[stop].gasLeft).add(fee));\n      },\n      finalizeRange: () => {\n        let range;\n        // if we have a composite context and we are NOT at the final terminator\n        if (compositeContext && stop !== steps.ops.length - 1) {\n          range = steps.ops[start].gasLeft.sub(steps.ops[stop - 1].gasLeft);\n          addGas(range);\n          const tail = steps.ops[stop - 1].gasLeft.sub(steps.ops[stop].gasLeft);\n          range = tail.add(intermediateCost);\n        } else {\n          range = steps.ops[start].gasLeft.sub(steps.ops[stop].gasLeft);\n        }\n        range.isub(callingFee);\n        addGas(range);\n        if (isCallOrCallcode(op.opcode.name) && !op.stack[op.stack.length - 3].isZero()) {\n          cost.iadd(sixtyFloorths);\n          const innerCost = next.gasLeft.sub(steps.ops[stop - 1].gasLeft);\n          if (innerCost.gt(STIPEND)) {\n            sixtyFloorths = cost.divn(63);\n          } else if (innerCost.lte(STIPEND)) {\n            sixtyFloorths = STIPEND.sub(innerCost);\n          }\n        } else if (stop !== steps.ops.length - 1) {\n          cost.iadd(sixtyFloorths);\n          sixtyFloorths = cost.divn(63);\n        }\n      }\n    };\n  };\n\n  const getTotal = () => {\n    const sysops = steps.systemOps;\n    const ops = steps.ops;\n    const opIndex = (cursor) => sysops[cursor].index;\n    const stack = [];\n    let cursor = 0;\n    let context = Context(0);\n    while (cursor < sysops.length) {\n      const currentIndex = opIndex(cursor);\n      const current = ops[currentIndex];\n      const name = current.opcode.name;\n      if (isCall(name) || isCreate(name)) {\n        if (steps.isPrecompile(currentIndex)) {\n          context.setStop(currentIndex + 1);\n          context.addRange();\n          context.setStart(currentIndex + 1);\n          context.addSixtyFloorth(STIPEND);\n        } else {\n          context.setStop(currentIndex);\n          context.addRange(bn(current.opcode.fee));\n          stack.push(context);\n          context = Context(currentIndex, bn(current.opcode.fee)); // setup next context\n        }\n      } else if (isTerminator(name)) {\n        // only on the last operation\n        context.setStop(currentIndex + 1 < steps.ops.length ? currentIndex + 1 : currentIndex);\n        context.finalizeRange();\n        const ctx = stack.pop();\n        if (ctx) {\n          ctx.transfer(context);\n          context = ctx;\n          context.setStart(currentIndex + 1);\n        } else {\n          break;\n        }\n      } else {\n        throw new Error(\"INVALID OPCODE\");\n      }\n      cursor++;\n    }\n    const gas = context.getCost();\n    return gas.cost.add(gas.sixtyFloorths);\n  };\n\n  const result = await vm.runTx(runArgs).catch((vmerr) => ({ vmerr }));\n  const vmerr = result.vmerr;\n  if (vmerr) {\n    return callback(vmerr);\n  } else if (result.execResult.exceptionError) {\n    const vmerr = RuntimeError.fromResults([runArgs.tx], { results: [result] });\n    return callback(vmerr, result);\n  } else if (steps.done()) {\n    const estimate = result.gasUsed;\n    result.gasEstimate = estimate;\n  } else {\n    const actualUsed = steps.ops[0].gasLeft.sub(steps.ops[steps.ops.length - 1].gasLeft);\n    const sixtyFloorths = getTotal().sub(actualUsed);\n    result.gasEstimate = result.gasUsed.add(sixtyFloorths);\n  }\n  callback(vmerr, result);\n};\n\nconst stepTracker = () => {\n  const sysOps = [];\n  const allOps = [];\n  const preCompile = new Set();\n  let preCompileCheck = false;\n  let precompileCallDepth = 0;\n  return {\n    collect: (info) => {\n      if (preCompileCheck) {\n        if (info.depth === precompileCallDepth) {\n          // If the current depth is unchanged.\n          // we record its position.\n          preCompile.add(allOps.length - 1);\n        }\n        // Reset the flag immediately here\n        preCompileCheck = false;\n      }\n      if (isCall(info.opcode.name)) {\n        info.stack = info.stack.map((val) => val.clone());\n        preCompileCheck = true;\n        precompileCallDepth = info.depth;\n        sysOps.push({ index: allOps.length, depth: info.depth, name: info.opcode.name });\n      } else if (isCreate(info.opcode.name) || isTerminator(info.opcode.name)) {\n        sysOps.push({ index: allOps.length, depth: info.depth, name: info.opcode.name });\n      }\n      // This goes last so we can use the length for the index ^\n      allOps.push(info);\n    },\n    isPrecompile: (index) => preCompile.has(index),\n    done: () => !allOps.length || sysOps.length < 2 || !isTerminator(allOps[allOps.length - 1].opcode.name),\n    ops: allOps,\n    systemOps: sysOps\n  };\n};\n","const { BN } = require(\"ethereumjs-util\");\nconst hexToBn = (val = 0) => new BN(parseInt(\"0x\" + val.toString(\"hex\"), 16));\nconst MULTIPLE = 64 / 63;\n\nmodule.exports = async function binSearch(generateVM, runArgs, result, callback) {\n  const MAX = hexToBn(runArgs.block.header.gasLimit);\n  const gasRefund = result.execResult.gasRefund;\n  const startingGas = gasRefund ? result.gasEstimate.add(gasRefund) : result.gasEstimate;\n  const range = { lo: startingGas, hi: startingGas };\n  const isEnoughGas = async(gas) => {\n    const vm = generateVM(); // Generate fresh VM\n    runArgs.tx.gasLimit = gas.toBuffer();\n    const result = await vm.runTx(runArgs).catch((vmerr) => ({ vmerr }));\n    return !result.vmerr && !result.execResult.exceptionError;\n  };\n\n  if (!(await isEnoughGas(range.hi))) {\n    do {\n      range.hi = range.hi.muln(MULTIPLE);\n    } while (!(await isEnoughGas(range.hi)));\n    while (range.lo.addn(1).lt(range.hi)) {\n      const mid = range.lo.add(range.hi).divn(2);\n      if (await isEnoughGas(mid)) {\n        range.hi = mid;\n      } else {\n        range.lo = mid;\n      }\n    }\n    if (range.hi.gte(MAX)) {\n      if (!(await isEnoughGas(range.hi))) {\n        return callback(new Error(\"gas required exceeds allowance or always failing transaction\"));\n      }\n    }\n  }\n\n  result.gasEstimate = range.hi;\n  callback(null, result);\n};\n","var BlockchainDouble = require(\"../blockchain_double.js\");\nvar Account = require(\"ethereumjs-account\").default;\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./log.js\");\nvar Receipt = require(\"./receipt.js\");\nvar utils = require(\"ethereumjs-util\");\nvar ForkedStorageTrie = require(\"./forkedstoragetrie.js\");\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\nvar Transaction = require(\"./transaction\");\nvar async = require(\"async\");\nconst BN = utils.BN;\n\nvar inherits = require(\"util\").inherits;\n\ninherits(ForkedBlockchain, BlockchainDouble);\n\nconst httpReg = /^https?:/i;\nconst protocolReg = /^[A-Za-z][A-Za-z0-9+\\-.]*:/;\nconst validProtocolReg = /^(?:http|ws)s?:/i;\n\nfunction ForkedBlockchain(options) {\n  this.options = options || {};\n\n  if (options.fork == null || (typeof options.fork === \"string\" && options.fork.trim().length === 0)) {\n    throw new Error(\"ForkedBlockchain must be passed a fork parameter.\");\n  }\n\n  this.forkVersion = null;\n\n  if (typeof options.fork === \"string\") {\n    if (options.fork.indexOf(\"@\") >= 0) {\n      const split = options.fork.split(\"@\", 2);\n      options.fork = split[0];\n      options.fork_block_number = parseInt(split[1]);\n    }\n\n    let fork;\n    if (!protocolReg.test(options.fork)) {\n      // we don't have a protocol at all, assume ws\n      options.fork = \"ws://\" + options.fork;\n      fork = new Web3.providers.WebsocketProvider(options.fork);\n    } else if (validProtocolReg.test(options.fork)) {\n      if (httpReg.test(options.fork)) {\n        fork = new Web3.providers.HttpProvider(options.fork);\n      } else {\n        fork = new Web3.providers.WebsocketProvider(options.fork);\n      }\n    } else {\n      throw new Error(`Invalid scheme for fork url: ${options.fork}. Supported schemes are: http, https, ws, and wss.`);\n    }\n\n    this.fork = fork;\n  } else {\n    this.fork = options.fork;\n  }\n  this.forkBlockNumber = options.fork_block_number;\n\n  this.time = options.time;\n  this.storageTrieCache = {};\n\n  BlockchainDouble.call(this, options);\n\n  this.createVMFromStateTrie = function() {\n    var vm = BlockchainDouble.prototype.createVMFromStateTrie.apply(this, arguments);\n    this.patchVM(vm);\n    return vm;\n  };\n\n  this.web3 = new Web3(this.fork);\n}\n\nForkedBlockchain.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.web3.eth.net.getId(function(err, version) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.forkVersion = version;\n\n    BlockchainDouble.prototype.initialize.call(self, accounts, callback);\n  });\n};\nForkedBlockchain.prototype.patchVM = function(vm) {\n  const trie = vm.stateManager._trie;\n  const lookupAccount = this.getLookupAccount(trie);\n  // Unfortunately forking requires a bit of monkey patching, but it gets the job done.\n  vm.stateManager._cache._lookupAccount = lookupAccount;\n  vm.stateManager._lookupStorageTrie = this.getLookupStorageTrie(trie, lookupAccount);\n};\n\n/**\n * @param db\n * @param root\n * @param options Allows overriding the options passed to the ForkedStorageTrie,\n * like `forkBlockNumber` (required for tracing transactions)\n */\nForkedBlockchain.prototype.createStateTrie = function(db, root, options) {\n  options = Object.assign(\n    {\n      fork: this.fork,\n      forkBlockNumber: this.forkBlockNumber,\n      blockchain: this\n    },\n    options\n  );\n  // never allow the forkBlockNumber to go beyond our root forkBlockNumber\n  if (options.forkBlockNumber > this.forkBlockNumber) {\n    options.forkBlockNumber = this.forkBlockNumber;\n  }\n  return new ForkedStorageTrie(db, root, options);\n};\n\nForkedBlockchain.prototype.createGenesisBlock = function(callback) {\n  var self = this;\n  var blockNumber = this.forkBlockNumber || \"latest\";\n\n  self.web3.eth.getBlock(blockNumber, function(err, json) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If no start time was passed, set the time to where we forked from.\n    // We only want to do this if a block was explicitly passed. If a block\n    // number wasn't passed, then we're using the last block and the current time.\n    if (!self.time && self.forkBlockNumber) {\n      self.time = self.options.time = new Date(to.number(json.timestamp) * 1000);\n      self.setTime(self.time);\n    }\n\n    blockNumber = json.number;\n\n    // Update the relevant block numbers\n    self.forkBlockNumber = self.options.fork_block_number = blockNumber;\n    self.stateTrie.forkBlockNumber = self.stateTrie.options.forkBlockNumber = blockNumber;\n\n    self.createBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      block.header.number = utils.toBuffer(to.number(json.number) + 1);\n      block.header.parentHash = utils.toBuffer(json.hash);\n\n      callback(null, block);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getLookupStorageTrie = function(stateTrie, lookupAccount) {\n  lookupAccount = lookupAccount || this.getLookupAccount(stateTrie);\n  return (address, callback) => {\n    const storageTrie = stateTrie.copy();\n    storageTrie.address = address;\n    lookupAccount(address, (err, account) => {\n      if (err) {\n        return callback(err);\n      }\n\n      storageTrie.root = account.stateRoot;\n      callback(null, storageTrie);\n    });\n  };\n};\n\nForkedBlockchain.prototype.isFallbackBlock = function(value, callback) {\n  var self = this;\n\n  self.getEffectiveBlockNumber(value, function(err, number) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, number <= to.number(self.forkBlockNumber));\n  });\n};\n\nForkedBlockchain.prototype.isBlockHash = function(value) {\n  const isHash = typeof value === \"string\" && value.indexOf(\"0x\") === 0 && value.length > 42;\n  return isHash || (Buffer.isBuffer(value) && value.byteLength > 20);\n};\n\nForkedBlockchain.prototype.isFallbackBlockHash = function(value, callback) {\n  var self = this;\n\n  if (!this.isBlockHash(value)) {\n    return callback(null, false);\n  }\n\n  if (Buffer.isBuffer(value)) {\n    value = to.hex(value);\n  }\n\n  self.data.blockHashes.get(value, function(err, blockIndex) {\n    if (err) {\n      if (err.notFound) {\n        // If the block isn't found in our database, then it must be a fallback block.\n        return callback(null, true);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, false);\n  });\n};\n\nForkedBlockchain.prototype.getFallbackBlock = function(numberOrHash, cb) {\n  var self = this;\n\n  if (Buffer.isBuffer(numberOrHash)) {\n    // When tracing a transaction the VM sometimes ask for a block numbers as\n    // buffers instead of numbers.\n    numberOrHash = to.rpcDataHexString(numberOrHash);\n  }\n  if (typeof numberOrHash === \"string\" && numberOrHash.length !== 66) {\n    numberOrHash = to.number(numberOrHash);\n  }\n\n  self.web3.eth.getBlock(numberOrHash, true, function(err, json) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (json == null) {\n      return cb(new Error(\"Block not found\"));\n    }\n\n    var block = new Block();\n\n    block.header.parentHash = utils.toBuffer(json.parentHash);\n    block.header.uncleHash = utils.toBuffer(json.sha3Uncles);\n    block.header.coinbase = utils.toBuffer(json.miner);\n    block.header.stateRoot = utils.toBuffer(json.stateRoot); // Should we include the following three?\n    block.header.transactionsTrie = utils.toBuffer(json.transactionsRoot);\n    block.header.receiptTrie = utils.toBuffer(json.receiptsRoot);\n    block.header.bloom = utils.toBuffer(json.logsBloom);\n    block.header.difficulty = utils.toBuffer(\"0x\" + json.totalDifficulty.toString(16)); // BigNumber\n    block.header.number = utils.toBuffer(json.number);\n    block.header.gasLimit = utils.toBuffer(json.gasLimit);\n    block.header.gasUsed = utils.toBuffer(json.gasUsed);\n    block.header.timestamp = utils.toBuffer(json.timestamp);\n    block.header.extraData = utils.toBuffer(json.extraData);\n\n    (json.transactions || []).forEach(function(txJson, index) {\n      block.transactions.push(\n        Transaction.fromJSON(txJson, Transaction.types.real, null, self.forkVersion, self.options.hardfork)\n      );\n    });\n\n    // Fake block. Let's do the worst.\n    // TODO: Attempt to fill out all block data so as to produce the same hash! (can we?)\n    block.hash = function() {\n      return utils.toBuffer(json.hash);\n    };\n\n    cb(null, block);\n  });\n};\n\nForkedBlockchain.prototype.getBlock = function(number, callback) {\n  let checkFn;\n  const isBlockHash = this.isBlockHash(number);\n  if (isBlockHash) {\n    checkFn = this.isFallbackBlockHash;\n  } else {\n    checkFn = this.isFallbackBlock;\n  }\n  checkFn.call(this, number, (err, isFallback) => {\n    if (err) {\n      return callback(err);\n    }\n    if (isFallback) {\n      return this.getFallbackBlock(number, callback);\n    }\n\n    const getBlock = BlockchainDouble.prototype.getBlock.bind(this);\n    if (isBlockHash) {\n      getBlock(number, callback);\n    } else {\n      this.getRelativeBlockNumber(number, (err, number) => {\n        if (err) {\n          return callback(err);\n        }\n        getBlock(number, callback);\n      });\n    }\n  });\n};\n\nForkedBlockchain.prototype.getStorage = function(address, key, number, callback) {\n  this.getLookupStorageTrie(this.stateTrie)(address, (err, trie) => {\n    if (err) {\n      return callback(err);\n    }\n    this.getEffectiveBlockNumber(number, (err, number) => {\n      if (err) {\n        return callback(err);\n      }\n      trie.get(utils.setLengthLeft(utils.toBuffer(key), 32), number, callback);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  if (!number) {\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n      // If we've stored the value and we're looking at one of our stored blocks,\n      // get it from our stored data.\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getCode.call(self, address, number, callback);\n      } else {\n        self.stateTrie.keyIsDeleted(address, (err, deleted) => {\n          if (err) {\n            return callback(err);\n          }\n          if (deleted) {\n            return callback(null, Buffer.allocUnsafe(0));\n          }\n          // Else, we need to fetch it from web3. If our number is greater than\n          // the fork, let's just use \"latest\".\n          if (number > to.number(self.forkBlockNumber)) {\n            number = \"latest\";\n          }\n\n          self.fetchCodeFromFallback(address, number, function(err, code) {\n            if (code) {\n              code = utils.toBuffer(code);\n            }\n            callback(err, code);\n          });\n        });\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getLookupAccount = function(trie) {\n  return (address, callback) => {\n    // If the account doesn't exist in our state trie, get it off the wire.\n    trie.keyExists(address, (err, exists) => {\n      if (err) {\n        return callback(err);\n      }\n      if (exists) {\n        trie.get(address, (err, data) => {\n          if (err) {\n            return callback(err);\n          }\n          const account = new Account(data);\n          callback(null, account);\n        });\n      } else {\n        this.fetchAccountFromFallback(address, to.number(trie.forkBlockNumber), callback);\n      }\n    });\n  };\n};\n\nForkedBlockchain.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    // If the account doesn't exist in our state trie, get it off the wire.\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getAccount.call(self, address, number, function(err, acc) {\n          if (err) {\n            return callback(err);\n          }\n          callback(null, acc);\n        });\n      } else {\n        self.fetchAccountFromFallback(address, number, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransaction = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransaction.call(this, hash, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n    if (tx != null) {\n      return callback(null, tx);\n    }\n\n    self.web3.eth.getTransaction(hash, function(err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result) {\n        result = Transaction.fromJSON(result, Transaction.types.signed, null, self.forkVersion, self.options.hardfork);\n      }\n\n      callback(null, result);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransactionReceipt = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransactionReceipt.call(this, hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n    if (receipt) {\n      return callback(null, receipt);\n    }\n\n    self.web3.eth.getTransactionReceipt(hash, function(err, receiptJson) {\n      if (err) {\n        return callback(err);\n      }\n      if (!receiptJson) {\n        return callback();\n      }\n\n      async.parallel(\n        {\n          tx: self.getTransaction.bind(self, hash),\n          block: self.getBlock.bind(self, receiptJson.blockNumber)\n        },\n        function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          var logs = receiptJson.logs.map(function(log) {\n            log.block = result.block;\n            return new Log(log);\n          });\n\n          var receipt = new Receipt(\n            result.tx,\n            result.block,\n            logs,\n            receiptJson.gasUsed,\n            receiptJson.cumulativeGasUsed,\n            receiptJson.contractAddress,\n            receiptJson.status,\n            to.hex(receiptJson.logsBloom)\n          );\n\n          callback(null, receipt);\n        }\n      );\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchAccountFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  async.parallel(\n    {\n      code: this.fetchCodeFromFallback.bind(this, address, blockNumber),\n      balance: this.fetchBalanceFromFallback.bind(this, address, blockNumber),\n      nonce: this.fetchNonceFromFallback.bind(this, address, blockNumber)\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var code = results.code;\n      var balance = results.balance;\n      var nonce = results.nonce;\n\n      var account = new Account({\n        nonce: nonce,\n        balance: balance\n      });\n\n      // This puts the code on the trie, keyed by the hash of the code.\n      // It does not actually link an account to code in the trie.\n      account.setCode(self.stateTrie, utils.toBuffer(code), function(err) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, account);\n      });\n    }\n  );\n};\n\nForkedBlockchain.prototype.fetchCodeFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getCode(address, safeBlockNumber, function(err, code) {\n      if (err) {\n        return callback(err);\n      }\n\n      code = \"0x\" + utils.toBuffer(code).toString(\"hex\");\n      callback(null, code);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchBalanceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getBalance(address, safeBlockNumber, function(err, balance) {\n      if (err) {\n        return callback(err);\n      }\n\n      balance = \"0x\" + new BN(balance).toString(16);\n      callback(null, balance);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchNonceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getTransactionCount(address, safeBlockNumber, function(err, nonce) {\n      if (err) {\n        return callback(err);\n      }\n\n      nonce = \"0x\" + self.web3.utils.toBN(nonce).toString(16);\n      callback(null, nonce);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getHeight = function(callback) {\n  this.latestBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.number(block.header.number));\n  });\n};\n\nForkedBlockchain.prototype.getRelativeBlockNumber = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, effective - to.number(self.forkBlockNumber) - 1);\n  });\n};\n\nForkedBlockchain.prototype.getSafeFallbackBlockNumber = function(blockNumber, callback) {\n  var forkBlockNumber = to.number(this.forkBlockNumber);\n\n  if (blockNumber == null) {\n    return callback(null, forkBlockNumber);\n  }\n\n  this.getEffectiveBlockNumber(blockNumber, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    if (effective > forkBlockNumber) {\n      effective = forkBlockNumber;\n    }\n\n    callback(null, effective);\n  });\n};\n\nForkedBlockchain.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.getRelativeBlockNumber(effective, function(err, relative) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (relative < 0) {\n        self.getBlock(number, function(err, block) {\n          if (err) {\n            return callback(err);\n          }\n\n          self.web3.currentProvider.send(\n            {\n              jsonrpc: \"2.0\",\n              method: \"eth_getLogs\",\n              params: [\n                {\n                  fromBlock: to.hex(number),\n                  toBlock: to.hex(number)\n                }\n              ],\n              id: new Date().getTime()\n            },\n            function(err, res) {\n              if (err) {\n                return callback(err);\n              }\n\n              var logs = res.result.map(function(log) {\n                // To make this result masquerade as the right information.\n                log.block = block;\n                return new Log(log);\n              });\n\n              callback(null, logs);\n            }\n          );\n        });\n      } else {\n        BlockchainDouble.prototype.getBlockLogs.call(self, relative, callback);\n      }\n    });\n  });\n};\n\nmodule.exports = ForkedBlockchain;\n","const Sublevel = require(\"level-sublevel\");\nconst MerklePatriciaTree = require(\"merkle-patricia-tree\");\nconst BaseTrie = require(\"merkle-patricia-tree/baseTrie\");\nconst checkpointInterface = require(\"merkle-patricia-tree/checkpoint-interface\");\nvar utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\n\ninherits(ForkedStorageBaseTrie, BaseTrie);\n\nfunction ForkedStorageBaseTrie(db, root, options) {\n  BaseTrie.call(this, db, root);\n  this._deleted = Sublevel(this.db).sublevel(\"deleted\");\n\n  this.options = options;\n  this.address = options.address;\n  this.forkBlockNumber = options.forkBlockNumber;\n  this.blockchain = options.blockchain;\n  this.fork = options.fork;\n  this.web3 = new Web3(this.fork);\n}\n\n// Note: This overrides a standard method whereas the other methods do not.\nForkedStorageBaseTrie.prototype.get = function(key, blockNumber, callback) {\n  var self = this;\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  key = utils.toBuffer(key);\n\n  // If the account/key doesn't exist in our state trie, get it off the wire.\n  this.keyExists(key, function(err, exists) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (exists) {\n      // TODO: just because we have the key doesn't mean we're at the right\n      // block number/root to send it. We need to check the block number\n      // before using the data in our own trie.\n      MerklePatriciaTree.prototype.get.call(self, key, function(err, r) {\n        callback(err, r);\n      });\n    } else {\n      self.keyIsDeleted(key, (err, deleted) => {\n        if (err) {\n          return callback(err);\n        }\n\n        if (deleted) {\n          // it was deleted. return nothing.\n          callback(null, Buffer.allocUnsafe(0));\n          return;\n        }\n\n        // If this is the main trie, get the whole account.\n        if (self.address == null) {\n          self.blockchain.fetchAccountFromFallback(key, blockNumber, function(err, account) {\n            if (err) {\n              return callback(err);\n            }\n\n            callback(null, account.serialize());\n          });\n        } else {\n          if (to.number(blockNumber) > to.number(self.forkBlockNumber)) {\n            blockNumber = self.forkBlockNumber;\n          }\n          self.web3.eth.getStorageAt(to.rpcDataHexString(self.address), to.rpcDataHexString(key), blockNumber, function(\n            err,\n            value\n          ) {\n            if (err) {\n              return callback(err);\n            }\n\n            value = utils.rlp.encode(value);\n\n            callback(null, value);\n          });\n        }\n      });\n    }\n  });\n};\n\nForkedStorageBaseTrie.prototype.keyExists = function(key, callback) {\n  key = utils.toBuffer(key);\n  this.findPath(key, (err, node, remainder, stack) => {\n    const exists = node && remainder.length === 0;\n    callback(err, exists);\n  });\n};\n\nForkedStorageBaseTrie.prototype.keyIsDeleted = function(key, callback) {\n  let rpcKey = to.rpcDataHexString(key);\n  if (this.address) {\n    rpcKey = `${to.rpcDataHexString(this.address)};${rpcKey}`;\n  }\n  this._deleted.get(rpcKey, (_, result) => {\n    callback(null, result === 1);\n  });\n};\n\nconst originalDelete = ForkedStorageBaseTrie.prototype.del;\nForkedStorageBaseTrie.prototype.del = function(key, callback) {\n  let rpcKey = to.rpcDataHexString(key);\n  if (this.address) {\n    rpcKey = `${to.rpcDataHexString(this.address)};${rpcKey}`;\n  }\n  this._deleted.put(rpcKey, 1, () => {\n    originalDelete.call(this, key, callback);\n  });\n};\n\nForkedStorageBaseTrie.prototype.copy = function() {\n  return new ForkedStorageBaseTrie(this.db, this.root, this.options);\n};\n\ninherits(ForkedStorageTrie, ForkedStorageBaseTrie);\n\nfunction ForkedStorageTrie(db, root, options) {\n  ForkedStorageBaseTrie.call(this, db, root, options);\n  checkpointInterface(this);\n}\n\nForkedStorageTrie.prove = MerklePatriciaTree.prove;\nForkedStorageTrie.verifyProof = MerklePatriciaTree.verifyProof;\n\nmodule.exports = ForkedStorageTrie;\n","module.exports = require(\"merkle-patricia-tree/baseTrie\");","module.exports = require(\"merkle-patricia-tree/checkpoint-interface\");","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\n\nvar ENS = require('web3-eth-ens');\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\n\n\nvar blockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\n\nvar Eth = function Eth() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function () {\n        setProvider.apply(_this, arguments);\n        _this.net.setProvider.apply(_this, arguments);\n        _this.personal.setProvider.apply(_this, arguments);\n        _this.accounts.setProvider.apply(_this, arguments);\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n    };\n\n\n    var defaultAccount = null;\n    var defaultBlock = 'latest';\n    var transactionBlockTimeout = 50;\n    var transactionConfirmationBlocks = 24;\n    var transactionPollingTimeout = 750;\n    var defaultChain, defaultHardfork, defaultCommon;\n\n    Object.defineProperty(this, 'defaultCommon', {\n        get: function () {\n            return defaultCommon;\n        },\n        set: function (val) {\n            defaultCommon = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultCommon = defaultCommon;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultCommon = defaultCommon;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultHardfork', {\n        get: function () {\n            return defaultHardfork;\n        },\n        set: function (val) {\n            defaultHardfork = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultHardfork = defaultHardfork;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultHardfork = defaultHardfork;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultChain', {\n        get: function () {\n            return defaultChain;\n        },\n        set: function (val) {\n            defaultChain = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultChain = defaultChain;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultChain = defaultChain;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionPollingTimeout', {\n        get: function () {\n            return transactionPollingTimeout;\n        },\n        set: function (val) {\n            transactionPollingTimeout = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionPollingTimeout = transactionPollingTimeout;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionPollingTimeout = transactionPollingTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionConfirmationBlocks', {\n        get: function () {\n            return transactionConfirmationBlocks;\n        },\n        set: function (val) {\n            transactionConfirmationBlocks = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionConfirmationBlocks = transactionConfirmationBlocks;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionBlockTimeout', {\n        get: function () {\n            return transactionBlockTimeout;\n        },\n        set: function (val) {\n            transactionBlockTimeout = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionBlockTimeout = transactionBlockTimeout;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionBlockTimeout = transactionBlockTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n            }\n\n            // also set on the Contract object\n            _this.Contract.defaultAccount = defaultAccount;\n            _this.personal.defaultAccount = defaultAccount;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n            // also set on the Contract object\n            _this.Contract.defaultBlock = defaultBlock;\n            _this.personal.defaultBlock = defaultBlock;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    // add net\n    this.net = new Net(this.currentProvider);\n    // add chain detection\n    this.net.getNetworkType = getNetworkType.bind(this);\n\n    // add accounts\n    this.accounts = new Accounts(this.currentProvider);\n\n    // add personal\n    this.personal = new Personal(this.currentProvider);\n    this.personal.defaultAccount = this.defaultAccount;\n\n    // create a proxy Contract type for this instance, as a Contract's provider\n    // is stored as a class member rather than an instance variable. If we do\n    // not create this proxy type, changing the provider in one instance of\n    // web3-eth would subsequently change the provider for _all_ contract\n    // instances!\n    var self = this;\n    var Contract = function Contract() {\n        BaseContract.apply(this, arguments);\n\n        // when Eth.setProvider is called, call packageInit\n        // on all contract instances instantiated via this Eth\n        // instances. This will update the currentProvider for\n        // the contract instances\n        var _this = this;\n        var setProvider = self.setProvider;\n        self.setProvider = function() {\n          setProvider.apply(self, arguments);\n          core.packageInit(_this, [self.currentProvider]);\n        };\n    };\n\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments);\n    };\n\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\n    // the right functionality and so that instanceof and friends work properly\n    Contract.prototype = Object.create(BaseContract.prototype);\n    Contract.prototype.constructor = Contract;\n\n    // add contract\n    this.Contract = Contract;\n    this.Contract.defaultAccount = this.defaultAccount;\n    this.Contract.defaultBlock = this.defaultBlock;\n    this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\n    this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\n    this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\n    this.Contract.setProvider(this.currentProvider, this.accounts);\n\n    // add IBAN\n    this.Iban = Iban;\n\n    // add ABI\n    this.abi = abi;\n\n    // add ENS\n    this.ens = new ENS(this);\n\n    var methods = [\n        new Method({\n            name: 'getNodeInfo',\n            call: 'web3_clientVersion'\n        }),\n        new Method({\n            name: 'getProtocolVersion',\n            call: 'eth_protocolVersion',\n            params: 0\n        }),\n        new Method({\n            name: 'getCoinbase',\n            call: 'eth_coinbase',\n            params: 0\n        }),\n        new Method({\n            name: 'isMining',\n            call: 'eth_mining',\n            params: 0\n        }),\n        new Method({\n            name: 'getHashrate',\n            call: 'eth_hashrate',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'isSyncing',\n            call: 'eth_syncing',\n            params: 0,\n            outputFormatter: formatter.outputSyncingFormatter\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0,\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getAccounts',\n            call: 'eth_accounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'getBlockNumber',\n            call: 'eth_blockNumber',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBalance',\n            call: 'eth_getBalance',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getStorageAt',\n            call: 'eth_getStorageAt',\n            params: 3,\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getBlock',\n            call: blockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getUncle',\n            call: uncleCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputBlockFormatter,\n\n        }),\n        new Method({\n            name: 'getBlockTransactionCount',\n            call: getBlockTransactionCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBlockUncleCount',\n            call: uncleCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getTransaction',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionFromBlock',\n            call: transactionFromBlockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'sendSignedTransaction',\n            call: 'eth_sendRawTransaction',\n            params: 1,\n            inputFormatter: [null]\n        }),\n        new Method({\n            name: 'signTransaction',\n            call: 'eth_signTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sendTransaction',\n            call: 'eth_sendTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sign',\n            call: 'eth_sign',\n            params: 2,\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n            transformPayload: function (payload) {\n                payload.params.reverse();\n                return payload;\n            }\n        }),\n        new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'estimateGas',\n            call: 'eth_estimateGas',\n            params: 1,\n            inputFormatter: [formatter.inputCallFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'submitWork',\n            call: 'eth_submitWork',\n            params: 3\n        }),\n        new Method({\n            name: 'getWork',\n            call: 'eth_getWork',\n            params: 0\n        }),\n        new Method({\n            name: 'getPastLogs',\n            call: 'eth_getLogs',\n            params: 1,\n            inputFormatter: [formatter.inputLogFormatter],\n            outputFormatter: formatter.outputLogFormatter\n        }),\n        new Method({\n            name: 'getChainId',\n            call: 'eth_chainId',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n\n        // subscriptions\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    // TODO rename on RPC side?\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatter.outputBlockFormatter\n                },\n                'pendingTransactions': {\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\n                    params: 0\n                },\n                'logs': {\n                    params: 1,\n                    inputFormatter: [formatter.inputLogFormatter],\n                    outputFormatter: formatter.outputLogFormatter,\n                    // DUBLICATE, also in web3-eth-contract\n                    subscriptionHandler: function (output) {\n                        if(output.removed) {\n                            this.emit('changed', output);\n                        } else {\n                            this.emit('data', output);\n                        }\n\n                        if (_.isFunction(this.callback)) {\n                            this.callback(null, output, this);\n                        }\n                    }\n                },\n                'syncing': {\n                    params: 0,\n                    outputFormatter: formatter.outputSyncingFormatter,\n                    subscriptionHandler: function (output) {\n                        var _this = this;\n\n                        // fire TRUE at start\n                        if(this._isSyncing !== true) {\n                            this._isSyncing = true;\n                            this.emit('changed', _this._isSyncing);\n\n                            if (_.isFunction(this.callback)) {\n                                this.callback(null, _this._isSyncing, this);\n                            }\n\n                            setTimeout(function () {\n                                _this.emit('data', output);\n\n                                if (_.isFunction(_this.callback)) {\n                                    _this.callback(null, output, _this);\n                                }\n                            }, 0);\n\n                            // fire sync status\n                        } else {\n                            this.emit('data', output);\n                            if (_.isFunction(_this.callback)) {\n                                this.callback(null, output, this);\n                            }\n\n                            // wait for some time before fireing the FALSE\n                            clearTimeout(this._isSyncingTimeout);\n                            this._isSyncingTimeout = setTimeout(function () {\n                                if(output.currentBlock > output.highestBlock - 200) {\n                                    _this._isSyncing = false;\n                                    _this.emit('changed', _this._isSyncing);\n\n                                    if (_.isFunction(_this.callback)) {\n                                        _this.callback(null, _this._isSyncing, _this);\n                                    }\n                                }\n                            }, 500);\n                        }\n                    }\n                }\n            }\n        })\n    ];\n\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n        method.transactionBlockTimeout = _this.transactionBlockTimeout;\n        method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\n        method.transactionPollingTimeout = _this.transactionPollingTimeout;\n    });\n\n};\n\ncore.addProviders(Eth);\n\n\nmodule.exports = Eth;\n\n","module.exports = require(\"web3-core-subscriptions\");","module.exports = require(\"web3-eth-ens\");","module.exports = require(\"web3-eth-contract\");","module.exports = require(\"web3-eth-iban\");","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file accounts.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n'use strict';\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar Method = require('web3-core-method');\nvar Promise = require('any-promise');\nvar Account = require('eth-lib/lib/account');\nvar Hash = require('eth-lib/lib/hash');\nvar RLP = require('eth-lib/lib/rlp');// jshint ignore:line\nvar Bytes = require('eth-lib/lib/bytes');// jshint ignore:line\nvar cryp = (typeof global === 'undefined') ? require('crypto-browserify') : require('crypto');\nvar scrypt = require('@web3-js/scrypt-shim');\nvar uuid = require('uuid');\nvar utils = require('web3-utils');\nvar helpers = require('web3-core-helpers');\nvar Transaction = require('ethereumjs-tx').Transaction;\nvar Common = require('ethereumjs-common').default;\n\n\nvar isNot = function(value) {\n    return (_.isUndefined(value) || _.isNull(value));\n};\n\nvar Accounts = function Accounts() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // remove unecessary core functions\n    delete this.BatchRequest;\n    delete this.extend;\n\n    var _ethereumCall = [\n        new Method({\n            name: 'getNetworkId',\n            call: 'net_version',\n            params: 0,\n            outputFormatter: parseInt\n        }),\n        new Method({\n            name: 'getChainId',\n            call: 'eth_chainId',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [function(address) {\n                if (utils.isAddress(address)) {\n                    return address;\n                } else {\n                    throw new Error('Address ' + address + ' is not a valid address to get the \"transactionCount\".');\n                }\n            }, function() {\n                return 'latest';\n            }]\n        })\n    ];\n    // attach methods to this._ethereumCall\n    this._ethereumCall = {};\n    _.each(_ethereumCall, function(method) {\n        method.attachToObject(_this._ethereumCall);\n        method.setRequestManager(_this._requestManager);\n    });\n\n\n    this.wallet = new Wallet(this);\n};\n\nAccounts.prototype._addAccountFunctions = function(account) {\n    var _this = this;\n\n    // add sign functions\n    account.signTransaction = function signTransaction(tx, callback) {\n        return _this.signTransaction(tx, account.privateKey, callback);\n    };\n    account.sign = function sign(data) {\n        return _this.sign(data, account.privateKey);\n    };\n\n    account.encrypt = function encrypt(password, options) {\n        return _this.encrypt(account.privateKey, password, options);\n    };\n\n\n    return account;\n};\n\nAccounts.prototype.create = function create(entropy) {\n    return this._addAccountFunctions(Account.create(entropy || utils.randomHex(32)));\n};\n\nAccounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey) {\n    return this._addAccountFunctions(Account.fromPrivate(privateKey));\n};\n\nAccounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {\n    var _this = this,\n        error = false,\n        transactionOptions = {},\n        result,\n        hasTxSigningOptions = !!(tx && ((tx.chain && tx.hardfork) || tx.common));\n\n    callback = callback || function() {\n    };\n\n    if (!tx) {\n        error = new Error('No transaction object given!');\n\n        callback(error);\n        return Promise.reject(error);\n    }\n\n    function signed(tx) {\n        if (tx.common && (tx.chain && tx.hardfork)) {\n            error = new Error(\n                'Please provide the ethereumjs-common object or the chain and hardfork property but not all together.'\n            );\n        }\n\n        if ((tx.chain && !tx.hardfork) || (tx.hardfork && !tx.chain)) {\n            error = new Error(\n                'When specifying chain and hardfork, both values must be defined. ' +\n                'Received \"chain\": ' + tx.chain + ', \"hardfork\": ' + tx.hardfork\n            );\n        }\n\n        if (!tx.gas && !tx.gasLimit) {\n            error = new Error('\"gas\" is missing');\n        }\n\n        if (tx.nonce < 0 ||\n            tx.gas < 0 ||\n            tx.gasPrice < 0 ||\n            tx.chainId < 0) {\n            error = new Error('Gas, gasPrice, nonce or chainId is lower than 0');\n        }\n\n        if (error) {\n            callback(error);\n            return Promise.reject(error);\n        }\n\n        try {\n            var transaction = helpers.formatters.inputCallFormatter(_.clone(tx));\n            transaction.to = transaction.to || '0x';\n            transaction.data = transaction.data || '0x';\n            transaction.value = transaction.value || '0x';\n            transaction.chainId = utils.numberToHex(transaction.chainId);\n\n            // Because tx has no ethereumjs-tx signing options we use fetched vals.\n            if (!hasTxSigningOptions) {\n                transactionOptions.common = Common.forCustomChain(\n                    'mainnet',\n                    {\n                        name: 'custom-network',\n                        networkId: transaction.networkId,\n                        chainId: transaction.chainId\n                    },\n                    'petersburg'\n                );\n\n                delete transaction.networkId;\n            } else {\n                if (transaction.common) {\n                    transactionOptions.common = Common.forCustomChain(\n                        transaction.common.baseChain || 'mainnet',\n                        {\n                            name: transaction.common.customChain.name || 'custom-network',\n                            networkId: transaction.common.customChain.networkId,\n                            chainId: transaction.common.customChain.chainId\n                        },\n                        transaction.common.hardfork || 'petersburg'\n                    );\n\n                    delete transaction.common;\n                }\n\n                if (transaction.chain) {\n                    transactionOptions.chain = transaction.chain;\n                    delete transaction.chain;\n                }\n\n                if (transaction.hardfork) {\n                    transactionOptions.hardfork = transaction.hardfork;\n                    delete transaction.hardfork;\n                }\n            }\n\n            if (privateKey.startsWith('0x')) {\n                privateKey = privateKey.substring(2);\n            }\n\n            var ethTx = new Transaction(transaction, transactionOptions);\n\n            ethTx.sign(Buffer.from(privateKey, 'hex'));\n\n            var validationResult = ethTx.validate(true);\n\n            if (validationResult !== '') {\n                throw new Error('Signer Error: ' + validationResult);\n            }\n\n            var rlpEncoded = ethTx.serialize().toString('hex');\n            var rawTransaction = '0x' + rlpEncoded;\n            var transactionHash = utils.keccak256(rawTransaction);\n\n            return {\n                messageHash: '0x' + Buffer.from(ethTx.hash(false)).toString('hex'),\n                v: '0x' + Buffer.from(ethTx.v).toString('hex'),\n                r: '0x' + Buffer.from(ethTx.r).toString('hex'),\n                s: '0x' + Buffer.from(ethTx.s).toString('hex'),\n                rawTransaction: rawTransaction,\n                transactionHash: transactionHash\n            };\n\n        } catch (e) {\n            callback(e);\n            return Promise.reject(e);\n        }\n\n        callback(null, result);\n        return result;\n    }\n\n\n    // Resolve immediately if nonce, chainId, price and signing options are provided\n    if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined && hasTxSigningOptions) {\n        return Promise.resolve(signed(tx));\n    }\n\n    // Otherwise, get the missing info from the Ethereum Node\n    return Promise.all([\n        isNot(tx.chainId) ? _this._ethereumCall.getChainId() : tx.chainId,\n        isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,\n        isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce,\n        isNot(hasTxSigningOptions) ? _this._ethereumCall.getNetworkId() : 1\n    ]).then(function(args) {\n        if (isNot(args[0]) || isNot(args[1]) || isNot(args[2]) || isNot(args[3])) {\n            throw new Error('One of the values \"chainId\", \"networkId\", \"gasPrice\", or \"nonce\" couldn\\'t be fetched: ' + JSON.stringify(args));\n        }\n        return signed(_.extend(tx, {chainId: args[0], gasPrice: args[1], nonce: args[2], networkId: args[3]}));\n    });\n};\n\n/* jshint ignore:start */\nAccounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {\n    var values = RLP.decode(rawTx);\n    var signature = Account.encodeSignature(values.slice(6, 9));\n    var recovery = Bytes.toNumber(values[6]);\n    var extraData = recovery < 35 ? [] : [Bytes.fromNumber((recovery - 35) >> 1), '0x', '0x'];\n    var signingData = values.slice(0, 6).concat(extraData);\n    var signingDataHex = RLP.encode(signingData);\n    return Account.recover(Hash.keccak256(signingDataHex), signature);\n};\n/* jshint ignore:end */\n\nAccounts.prototype.hashMessage = function hashMessage(data) {\n    var message = utils.isHexStrict(data) ? utils.hexToBytes(data) : data;\n    var messageBuffer = Buffer.from(message);\n    var preamble = '\\x19Ethereum Signed Message:\\n' + message.length;\n    var preambleBuffer = Buffer.from(preamble);\n    var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);\n    return Hash.keccak256s(ethMessage);\n};\n\nAccounts.prototype.sign = function sign(data, privateKey) {\n    var hash = this.hashMessage(data);\n    var signature = Account.sign(hash, privateKey);\n    var vrs = Account.decodeSignature(signature);\n    return {\n        message: data,\n        messageHash: hash,\n        v: vrs[0],\n        r: vrs[1],\n        s: vrs[2],\n        signature: signature\n    };\n};\n\nAccounts.prototype.recover = function recover(message, signature, preFixed) {\n    var args = [].slice.apply(arguments);\n\n\n    if (_.isObject(message)) {\n        return this.recover(message.messageHash, Account.encodeSignature([message.v, message.r, message.s]), true);\n    }\n\n    if (!preFixed) {\n        message = this.hashMessage(message);\n    }\n\n    if (args.length >= 4) {\n        preFixed = args.slice(-1)[0];\n        preFixed = _.isBoolean(preFixed) ? !!preFixed : false;\n\n        return this.recover(message, Account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s\n    }\n    return Account.recover(message, signature);\n};\n\n// Taken from https://github.com/ethereumjs/ethereumjs-wallet\nAccounts.prototype.decrypt = function(v3Keystore, password, nonStrict) {\n    /* jshint maxcomplexity: 10 */\n\n    if (!_.isString(password)) {\n        throw new Error('No password given.');\n    }\n\n    var json = (_.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);\n\n    if (json.version !== 3) {\n        throw new Error('Not a valid V3 wallet');\n    }\n\n    var derivedKey;\n    var kdfparams;\n    if (json.crypto.kdf === 'scrypt') {\n        kdfparams = json.crypto.kdfparams;\n\n        // FIXME: support progress reporting callback\n        derivedKey = scrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else if (json.crypto.kdf === 'pbkdf2') {\n        kdfparams = json.crypto.kdfparams;\n\n        if (kdfparams.prf !== 'hmac-sha256') {\n            throw new Error('Unsupported parameters to PBKDF2');\n        }\n\n        derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else {\n        throw new Error('Unsupported key derivation scheme');\n    }\n\n    var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n    var mac = utils.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext])).replace('0x', '');\n    if (mac !== json.crypto.mac) {\n        throw new Error('Key derivation failed - possibly wrong password');\n    }\n\n    var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n    var seed = '0x' + Buffer.concat([decipher.update(ciphertext), decipher.final()]).toString('hex');\n\n    return this.privateKeyToAccount(seed);\n};\n\nAccounts.prototype.encrypt = function(privateKey, password, options) {\n    /* jshint maxcomplexity: 20 */\n    var account = this.privateKeyToAccount(privateKey);\n\n    options = options || {};\n    var salt = options.salt || cryp.randomBytes(32);\n    var iv = options.iv || cryp.randomBytes(16);\n\n    var derivedKey;\n    var kdf = options.kdf || 'scrypt';\n    var kdfparams = {\n        dklen: options.dklen || 32,\n        salt: salt.toString('hex')\n    };\n\n    if (kdf === 'pbkdf2') {\n        kdfparams.c = options.c || 262144;\n        kdfparams.prf = 'hmac-sha256';\n        derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else if (kdf === 'scrypt') {\n        // FIXME: support progress reporting callback\n        kdfparams.n = options.n || 8192; // 2048 4096 8192 16384\n        kdfparams.r = options.r || 8;\n        kdfparams.p = options.p || 1;\n        derivedKey = scrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else {\n        throw new Error('Unsupported kdf');\n    }\n\n    var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n    if (!cipher) {\n        throw new Error('Unsupported cipher');\n    }\n\n    var ciphertext = Buffer.concat([cipher.update(Buffer.from(account.privateKey.replace('0x', ''), 'hex')), cipher.final()]);\n\n    var mac = utils.sha3(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')])).replace('0x', '');\n\n    return {\n        version: 3,\n        id: uuid.v4({random: options.uuid || cryp.randomBytes(16)}),\n        address: account.address.toLowerCase().replace('0x', ''),\n        crypto: {\n            ciphertext: ciphertext.toString('hex'),\n            cipherparams: {\n                iv: iv.toString('hex')\n            },\n            cipher: options.cipher || 'aes-128-ctr',\n            kdf: kdf,\n            kdfparams: kdfparams,\n            mac: mac.toString('hex')\n        }\n    };\n};\n\n\n// Note: this is trying to follow closely the specs on\n// http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html\n\nfunction Wallet(accounts) {\n    this._accounts = accounts;\n    this.length = 0;\n    this.defaultKeyName = 'web3js_wallet';\n}\n\nWallet.prototype._findSafeIndex = function(pointer) {\n    pointer = pointer || 0;\n    if (_.has(this, pointer)) {\n        return this._findSafeIndex(pointer + 1);\n    } else {\n        return pointer;\n    }\n};\n\nWallet.prototype._currentIndexes = function() {\n    var keys = Object.keys(this);\n    var indexes = keys\n        .map(function(key) {\n            return parseInt(key);\n        })\n        .filter(function(n) {\n            return (n < 9e20);\n        });\n\n    return indexes;\n};\n\nWallet.prototype.create = function(numberOfAccounts, entropy) {\n    for (var i = 0; i < numberOfAccounts; ++i) {\n        this.add(this._accounts.create(entropy).privateKey);\n    }\n    return this;\n};\n\nWallet.prototype.add = function(account) {\n\n    if (_.isString(account)) {\n        account = this._accounts.privateKeyToAccount(account);\n    }\n    if (!this[account.address]) {\n        account = this._accounts.privateKeyToAccount(account.privateKey);\n        account.index = this._findSafeIndex();\n\n        this[account.index] = account;\n        this[account.address] = account;\n        this[account.address.toLowerCase()] = account;\n\n        this.length++;\n\n        return account;\n    } else {\n        return this[account.address];\n    }\n};\n\nWallet.prototype.remove = function(addressOrIndex) {\n    var account = this[addressOrIndex];\n\n    if (account && account.address) {\n        // address\n        this[account.address].privateKey = null;\n        delete this[account.address];\n        // address lowercase\n        this[account.address.toLowerCase()].privateKey = null;\n        delete this[account.address.toLowerCase()];\n        // index\n        this[account.index].privateKey = null;\n        delete this[account.index];\n\n        this.length--;\n\n        return true;\n    } else {\n        return false;\n    }\n};\n\nWallet.prototype.clear = function() {\n    var _this = this;\n    var indexes = this._currentIndexes();\n\n    indexes.forEach(function(index) {\n        _this.remove(index);\n    });\n\n    return this;\n};\n\nWallet.prototype.encrypt = function(password, options) {\n    var _this = this;\n    var indexes = this._currentIndexes();\n\n    var accounts = indexes.map(function(index) {\n        return _this[index].encrypt(password, options);\n    });\n\n    return accounts;\n};\n\n\nWallet.prototype.decrypt = function(encryptedWallet, password) {\n    var _this = this;\n\n    encryptedWallet.forEach(function(keystore) {\n        var account = _this._accounts.decrypt(keystore, password);\n\n        if (account) {\n            _this.add(account);\n        } else {\n            throw new Error('Couldn\\'t decrypt accounts. Password wrong?');\n        }\n    });\n\n    return this;\n};\n\nWallet.prototype.save = function(password, keyName) {\n    localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));\n\n    return true;\n};\n\nWallet.prototype.load = function(password, keyName) {\n    var keystore = localStorage.getItem(keyName || this.defaultKeyName);\n\n    if (keystore) {\n        try {\n            keystore = JSON.parse(keystore);\n        } catch (e) {\n\n        }\n    }\n\n    return this.decrypt(keystore || [], password);\n};\n\nif (!storageAvailable('localStorage')) {\n    delete Wallet.prototype.save;\n    delete Wallet.prototype.load;\n}\n\n/**\n * Checks whether a storage type is available or not\n * For more info on how this works, please refer to MDN documentation\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n *\n * @method storageAvailable\n * @param {String} type the type of storage ('localStorage', 'sessionStorage')\n * @returns {Boolean} a boolean indicating whether the specified storage is available or not\n */\nfunction storageAvailable(type) {\n    var storage;\n    try {\n        storage = window[type];\n        var x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (e) {\n        return e && (\n                // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            (storage && storage.length !== 0);\n    }\n}\n\n\nmodule.exports = Accounts;\n","module.exports = require(\"any-promise\");","module.exports = require(\"eth-lib/lib/account\");","module.exports = require(\"eth-lib/lib/hash\");","module.exports = require(\"eth-lib/lib/rlp\");","module.exports = require(\"eth-lib/lib/bytes\");","module.exports = require(\"crypto-browserify\");","module.exports = require(\"@web3-js/scrypt-shim\");","module.exports = require(\"uuid\");","module.exports = require(\"web3-eth-abi\");","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file getNetworkType.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar getNetworkType = function (callback) {\n    var _this = this,\n        id;\n\n\n    return this.net.getId()\n        .then(function (givenId) {\n\n            id = givenId;\n\n            return _this.getBlock(0);\n        })\n        .then(function (genesis) {\n            var returnValue = 'private';\n\n            if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&\n                id === 1) {\n                returnValue = 'main';\n            }\n            if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&\n                id === 2) {\n                returnValue = 'morden';\n            }\n            if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&\n                id === 3) {\n                returnValue = 'ropsten';\n            }\n            if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&\n                id === 4) {\n                returnValue = 'rinkeby';\n            }\n            if (genesis.hash === '0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a' &&\n                id === 5) {\n                returnValue = 'goerli';\n            }\n            if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&\n                id === 42) {\n                returnValue = 'kovan';\n            }\n\n            if (_.isFunction(callback)) {\n                callback(null, returnValue);\n            }\n\n            return returnValue;\n        })\n        .catch(function (err) {\n            if (_.isFunction(callback)) {\n                callback(err);\n            } else {\n                throw err;\n            }\n        });\n};\n\nmodule.exports = getNetworkType;\n","module.exports = require(\"web3-shh\");","module.exports = require(\"web3-bzz\");","module.exports = require(\"eth-sig-util\");","module.exports = require(\"rlp\");","module.exports = {\n  // Mimics crypto.random bytes, but takes in a random number generator\n  // as its second parameter. rng is expected to be a function that takes\n  // no parameters and returns a result like Math.random().\n  // This is important because it allows for a seeded random number generator.\n  // Since this is a mock RPC library, the rng doesn't need to be cryptographically secure.\n  randomBytes: function(length, rng) {\n    var buf = [];\n\n    for (var i = 0; i < length; i++) {\n      buf.push(rng() * 255);\n    }\n\n    return Buffer.from(buf);\n  },\n\n  randomAlphaNumericString: function(length, rng) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    let text = \"\";\n\n    for (var i = 0; i < length; i++) {\n      text += alphabet.charAt(Math.floor((rng || Math.random)() * alphabet.length));\n    }\n\n    return text;\n  }\n};\n","// this replaces `eth-block-tracker` in the provider-engine, as that block tracker is meant to work with\n// an external provider instance\n\nconst EventEmitter = require(\"events\");\nvar blockHelper = require(\"./utils/block_helper\");\n\nfunction GanacheBlockTracker(opts) {\n  opts = opts || {};\n  EventEmitter.apply(this);\n  if (!opts.blockchain) {\n    throw new Error(\"RpcBlockTracker - no blockchain specified.\");\n  }\n  if (!opts.blockchain.on) {\n    throw new Error(\"RpcBlockTracker - blockchain is not an EventEmitter.\");\n  }\n  this._blockchain = opts.blockchain;\n  this.start = this.start.bind(this);\n  this.stop = this.stop.bind(this);\n  this.getTrackingBlock = this.getTrackingBlock.bind(this);\n  this.awaitCurrentBlock = this.awaitCurrentBlock.bind(this);\n  this._setCurrentBlock = this._setCurrentBlock.bind(this);\n}\n\nGanacheBlockTracker.prototype = Object.create(EventEmitter.prototype);\nGanacheBlockTracker.prototype.constructor = GanacheBlockTracker;\n\nGanacheBlockTracker.prototype.getTrackingBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.getCurrentBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.awaitCurrentBlock = function() {\n  const self = this;\n  // return if available\n  if (this._currentBlock) {\n    return this._currentBlock;\n  }\n  // wait for \"sync\" event\n  return new Promise((resolve) => this.once(\"block\", resolve)).then(() => self._currentBlock);\n};\n\nGanacheBlockTracker.prototype.start = function(opts = {}) {\n  this._blockchain.on(\"block\", this._setCurrentBlock);\n  return Promise.resolve();\n};\n\nGanacheBlockTracker.prototype.stop = function() {\n  this._isRunning = false;\n  this._blockchain.removeListener(\"block\", this._setCurrentBlock);\n};\n\n//\n// private\n//\n\nGanacheBlockTracker.prototype._setCurrentBlock = function(newBlock) {\n  let block = blockHelper.toJSON(newBlock, true);\n  if (this._currentBlock && this._currentBlock.hash === block.hash) {\n    return;\n  }\n  const oldBlock = this._currentBlock;\n  this._currentBlock = block;\n  this.emit(\"latest\", block);\n  this.emit(\"sync\", { block, oldBlock });\n  this.emit(\"block\", block);\n};\n\nmodule.exports = GanacheBlockTracker;\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nvar Provider = require(\"./provider\");\nvar webSocketServer = require(\"./webSocketServer\");\nvar httpServer = require(\"./httpServer\");\nvar _ = require(\"lodash\");\n\nmodule.exports = {\n  create: function(options) {\n    options = _applyDefaultOptions(options || {});\n\n    var logger = options.logger;\n    var provider = new Provider(options);\n\n    var server = httpServer(provider, logger);\n    server.keepAliveTimeout = options.keepAliveTimeout;\n\n    let connectionCounter = 0;\n    const connections = {};\n    server.on(\"connection\", (conn) => {\n      let key = connectionCounter++;\n      connections[key] = conn;\n      conn.on(\"close\", () => delete connections[key]);\n    });\n\n    var oldListen = server.listen;\n\n    server.listen = function() {\n      var args = Array.prototype.slice.call(arguments);\n      var callback = function() {};\n      if (args.length > 0) {\n        var last = args[args.length - 1];\n        if (typeof last === \"function\") {\n          callback = args.pop();\n        }\n      }\n\n      var intermediary = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        server.provider.manager.waitForInitialization(callback);\n      };\n\n      args.push(intermediary);\n\n      oldListen.apply(server, args);\n    };\n\n    server.provider = provider;\n\n    if (options.ws) {\n      webSocketServer(server, provider, logger);\n    }\n\n    var oldClose = server.close;\n\n    server.close = function(callback) {\n      var args = Array.prototype.slice.call(arguments);\n      oldClose.apply(server, args);\n\n      server.provider.close(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        Object.keys(connections).forEach((key) => {\n          try {\n            connections[key].destroy();\n          } catch (error) {}\n        });\n      });\n    };\n\n    return server;\n  }\n};\n\nconst defaultOptions = {\n  logger: {\n    log: function() {}\n  },\n  ws: true,\n  keepAliveTimeout: 5000\n};\n\nvar _applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n","var websocket = require(\"websocket\");\nvar WebSocketServer = websocket.server;\n\nmodule.exports = function(httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n\n  provider.on(\"data\", function(err, notification) {\n    if (err) {\n      return;\n    }\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function(connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n\n  connection.on(\"message\", function(message) {\n    let payload;\n    try {\n      if (message.type === \"utf8\") {\n        payload = JSON.parse(message.utf8Data);\n      } else if (message.type === \"binary\") {\n        payload = JSON.parse(message.binaryData.toString(\"utf8\").trim());\n      } else {\n        throw new Error(\"Invalid message type\");\n      }\n    } catch (e) {\n      connection.close(websocket.connection.CLOSE_REASON_UNPROCESSABLE_INPUT, e.message);\n      return;\n    }\n\n    self._logPayload(payload);\n    self._handleRequest(connection, payload);\n  });\n\n  connection.on(\"close\", function() {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach((subscriptionId) => {\n      self.provider.send(\n        {\n          jsonrpc: \"2.0\",\n          method: \"eth_unsubscribe\",\n          params: [subscriptionId],\n          id: new Date().getTime()\n        },\n        function(err, result) {\n          if (err) {\n            return;\n          }\n          delete self.connectionsBySubscriptionId[subscriptionId];\n        }\n      );\n    });\n\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function(connection, payload) {\n  const self = this;\n\n  // handle subscription requests, otherwise delegate to provider\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (!err && result.result && self.connections[connection.id]) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n          return;\n        }\n\n        if (self.connections[connection.id]) {\n          delete self.connections[connection.id].subscriptions[payload.params[0]];\n        }\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    default:\n      self.provider.send(payload, function(_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n};\n\n// Log messages that come into the TestRPC via http\nConnectionManager.prototype._logPayload = function(payload) {\n  const self = this;\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function(notification) {\n  const subscription = this.connectionsBySubscriptionId[notification.params.subscription];\n  // Safety check for subscription/connection.\n  if (subscription) {\n    subscription.connection.send(JSON.stringify(notification));\n  }\n};\n","module.exports = require(\"websocket\");","const http = require(\"http\");\nconst { rpcError } = require(\"./utils/to\");\n\nfunction createCORSResponseHeaders(method, requestHeaders) {\n  // https://fetch.spec.whatwg.org/#http-requests\n  const headers = {};\n  let isCORSRequest = requestHeaders.hasOwnProperty(\"origin\");\n  if (isCORSRequest) {\n    // OPTIONS preflight requests need a little extra treatment\n    if (method === \"OPTIONS\") {\n      // we only allow POST requests, so it doesn't matter which method the request is asking for\n      headers[\"Access-Control-Allow-Methods\"] = \"POST\";\n      // echo all requested access-control-request-headers back to the response\n      if (requestHeaders.hasOwnProperty(\"access-control-request-headers\")) {\n        headers[\"Access-Control-Allow-Headers\"] = requestHeaders[\"access-control-request-headers\"];\n      }\n      // Safari needs Content-Length = 0 for a 204 response otherwise it hangs forever\n      // https://github.com/expressjs/cors/pull/121#issue-130260174\n      headers[\"Content-Length\"] = 0;\n\n      // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n      // minutes (this is the maximum time Chromium allows)\n      headers[\"Access-Control-Max-Age\"] = 600; // seconds\n    }\n\n    // From the spec: https://fetch.spec.whatwg.org/#http-responses\n    // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n    // but for any subsequent CORS requests it might not be. Support therefore\n    // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n    // header is added to all requests.\n    // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n    // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n    // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n    // returned even when no credentials are set in the browser this header must always be return on all requests.\n    // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n    //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n    //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n    headers[\"Access-Control-Allow-Credentials\"] = true;\n\n    // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n    // as the `Origin` header is also included for all requests whose method is neither\n    // `GET` nor `HEAD`.\"\n    // Explicitly set the origin instead of using *, since credentials\n    // can't be used in conjunction with *. This will always be set\n    /// for valid preflight requests.\n    headers[\"Access-Control-Allow-Origin\"] = requestHeaders.origin;\n  }\n  return headers;\n}\n\nfunction sendResponse(response, statusCode, headers, data) {\n  response.writeHead(statusCode, headers);\n  response.end(data);\n}\n\nmodule.exports = function(provider, logger) {\n  var server = http.createServer(function(request, response) {\n    var method = request.method;\n    var body = [];\n\n    request\n      .on(\"data\", function(chunk) {\n        body.push(chunk);\n      })\n      .on(\"end\", function() {\n        body = Buffer.concat(body).toString();\n        // At this point, we have the headers, method, url and body, and can now\n        // do whatever we need to in order to respond to this request.\n\n        const headers = createCORSResponseHeaders(method, request.headers);\n\n        switch (method) {\n          case \"POST\":\n            var payload;\n            try {\n              payload = JSON.parse(body);\n            } catch (e) {\n              headers[\"Content-Type\"] = \"text/plain\";\n              sendResponse(response, 400, headers, \"400 Bad Request\");\n              return;\n            }\n\n            // Log messages that come into the TestRPC via http\n            if (payload instanceof Array) {\n              // Batch request\n              for (var i = 0; i < payload.length; i++) {\n                var item = payload[i];\n                logger.log(item.method);\n              }\n            } else {\n              logger.log(payload.method);\n            }\n\n            // http connections do not support subscriptions\n            if (payload.method === \"eth_subscribe\" || payload.method === \"eth_unsubscribe\") {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 400, headers, rpcError(payload.id, -32000, \"notifications not supported\"));\n              break;\n            }\n\n            provider.send(payload, function(_, result) {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 200, headers, JSON.stringify(result));\n            });\n\n            break;\n          case \"OPTIONS\":\n            sendResponse(response, 204, headers);\n            break;\n          default:\n            headers[\"Content-Type\"] = \"text/plain\";\n            sendResponse(response, 400, headers, \"400 Bad Request\");\n            break;\n        }\n      });\n  });\n\n  server.ganacheProvider = provider;\n  return server;\n};\n","module.exports = require(\"http\");"],"sourceRoot":""}